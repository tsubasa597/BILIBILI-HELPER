// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.17.3
// source: comment.proto

package service

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type BaseCommentRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type int32 `protobuf:"varint,1,opt,name=Type,proto3" json:"Type,omitempty"`
	RID  int64 `protobuf:"varint,2,opt,name=RID,proto3" json:"RID,omitempty"`
}

func (x *BaseCommentRequest) Reset() {
	*x = BaseCommentRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_comment_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BaseCommentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BaseCommentRequest) ProtoMessage() {}

func (x *BaseCommentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_comment_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BaseCommentRequest.ProtoReflect.Descriptor instead.
func (*BaseCommentRequest) Descriptor() ([]byte, []int) {
	return file_comment_proto_rawDescGZIP(), []int{0}
}

func (x *BaseCommentRequest) GetType() int32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *BaseCommentRequest) GetRID() int64 {
	if x != nil {
		return x.RID
	}
	return 0
}

type CommentRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BaseCommentRequest *BaseCommentRequest `protobuf:"bytes,1,opt,name=baseCommentRequest,proto3" json:"baseCommentRequest,omitempty"`
	PageSum            int32               `protobuf:"varint,2,opt,name=PageSum,proto3" json:"PageSum,omitempty"`
	PageNum            int32               `protobuf:"varint,3,opt,name=PageNum,proto3" json:"PageNum,omitempty"`
	Sort               int32               `protobuf:"varint,4,opt,name=Sort,proto3" json:"Sort,omitempty"`
}

func (x *CommentRequest) Reset() {
	*x = CommentRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_comment_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommentRequest) ProtoMessage() {}

func (x *CommentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_comment_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommentRequest.ProtoReflect.Descriptor instead.
func (*CommentRequest) Descriptor() ([]byte, []int) {
	return file_comment_proto_rawDescGZIP(), []int{1}
}

func (x *CommentRequest) GetBaseCommentRequest() *BaseCommentRequest {
	if x != nil {
		return x.BaseCommentRequest
	}
	return nil
}

func (x *CommentRequest) GetPageSum() int32 {
	if x != nil {
		return x.PageSum
	}
	return 0
}

func (x *CommentRequest) GetPageNum() int32 {
	if x != nil {
		return x.PageNum
	}
	return 0
}

func (x *CommentRequest) GetSort() int32 {
	if x != nil {
		return x.Sort
	}
	return 0
}

type AllCommentRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BaseCommentRequest *BaseCommentRequest `protobuf:"bytes,1,opt,name=baseCommentRequest,proto3" json:"baseCommentRequest,omitempty"`
	Time               int64               `protobuf:"varint,2,opt,name=Time,proto3" json:"Time,omitempty"`
}

func (x *AllCommentRequest) Reset() {
	*x = AllCommentRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_comment_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AllCommentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AllCommentRequest) ProtoMessage() {}

func (x *AllCommentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_comment_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AllCommentRequest.ProtoReflect.Descriptor instead.
func (*AllCommentRequest) Descriptor() ([]byte, []int) {
	return file_comment_proto_rawDescGZIP(), []int{2}
}

func (x *AllCommentRequest) GetBaseCommentRequest() *BaseCommentRequest {
	if x != nil {
		return x.BaseCommentRequest
	}
	return nil
}

func (x *AllCommentRequest) GetTime() int64 {
	if x != nil {
		return x.Time
	}
	return 0
}

type CommentResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserID  int64  `protobuf:"varint,1,opt,name=UserID,proto3" json:"UserID,omitempty"`
	RID     int64  `protobuf:"varint,2,opt,name=RID,proto3" json:"RID,omitempty"`
	UID     int64  `protobuf:"varint,3,opt,name=UID,proto3" json:"UID,omitempty"`
	Rpid    int64  `protobuf:"varint,4,opt,name=Rpid,proto3" json:"Rpid,omitempty"`
	Like    int32  `protobuf:"varint,5,opt,name=like,proto3" json:"like,omitempty"`
	Content string `protobuf:"bytes,6,opt,name=Content,proto3" json:"Content,omitempty"`
	Time    int64  `protobuf:"varint,7,opt,name=Time,proto3" json:"Time,omitempty"`
}

func (x *CommentResponse) Reset() {
	*x = CommentResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_comment_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommentResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommentResponse) ProtoMessage() {}

func (x *CommentResponse) ProtoReflect() protoreflect.Message {
	mi := &file_comment_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommentResponse.ProtoReflect.Descriptor instead.
func (*CommentResponse) Descriptor() ([]byte, []int) {
	return file_comment_proto_rawDescGZIP(), []int{3}
}

func (x *CommentResponse) GetUserID() int64 {
	if x != nil {
		return x.UserID
	}
	return 0
}

func (x *CommentResponse) GetRID() int64 {
	if x != nil {
		return x.RID
	}
	return 0
}

func (x *CommentResponse) GetUID() int64 {
	if x != nil {
		return x.UID
	}
	return 0
}

func (x *CommentResponse) GetRpid() int64 {
	if x != nil {
		return x.Rpid
	}
	return 0
}

func (x *CommentResponse) GetLike() int32 {
	if x != nil {
		return x.Like
	}
	return 0
}

func (x *CommentResponse) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *CommentResponse) GetTime() int64 {
	if x != nil {
		return x.Time
	}
	return 0
}

var File_comment_proto protoreflect.FileDescriptor

var file_comment_proto_rawDesc = []byte{
	0x0a, 0x0d, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x04, 0x67, 0x72, 0x70, 0x63, 0x22, 0x3a, 0x0a, 0x12, 0x42, 0x61, 0x73, 0x65, 0x43, 0x6f, 0x6d,
	0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x54,
	0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x10, 0x0a, 0x03, 0x52, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x52, 0x49,
	0x44, 0x22, 0xa2, 0x01, 0x0a, 0x0e, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x48, 0x0a, 0x12, 0x62, 0x61, 0x73, 0x65, 0x43, 0x6f, 0x6d, 0x6d,
	0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x18, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x43, 0x6f, 0x6d, 0x6d,
	0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x12, 0x62, 0x61, 0x73, 0x65,
	0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18,
	0x0a, 0x07, 0x50, 0x61, 0x67, 0x65, 0x53, 0x75, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x07, 0x50, 0x61, 0x67, 0x65, 0x53, 0x75, 0x6d, 0x12, 0x18, 0x0a, 0x07, 0x50, 0x61, 0x67, 0x65,
	0x4e, 0x75, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x50, 0x61, 0x67, 0x65, 0x4e,
	0x75, 0x6d, 0x12, 0x12, 0x0a, 0x04, 0x53, 0x6f, 0x72, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x04, 0x53, 0x6f, 0x72, 0x74, 0x22, 0x71, 0x0a, 0x11, 0x41, 0x6c, 0x6c, 0x43, 0x6f, 0x6d,
	0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x48, 0x0a, 0x12, 0x62,
	0x61, 0x73, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x42,
	0x61, 0x73, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x52, 0x12, 0x62, 0x61, 0x73, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x04, 0x54, 0x69, 0x6d, 0x65, 0x22, 0xa3, 0x01, 0x0a, 0x0f, 0x43, 0x6f,
	0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a,
	0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x55,
	0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x10, 0x0a, 0x03, 0x52, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x03, 0x52, 0x49, 0x44, 0x12, 0x10, 0x0a, 0x03, 0x55, 0x49, 0x44, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x55, 0x49, 0x44, 0x12, 0x12, 0x0a, 0x04, 0x52, 0x70, 0x69,
	0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x52, 0x70, 0x69, 0x64, 0x12, 0x12, 0x0a,
	0x04, 0x6c, 0x69, 0x6b, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x6c, 0x69, 0x6b,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x54,
	0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x54, 0x69, 0x6d, 0x65, 0x32,
	0x7f, 0x0a, 0x07, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x3c, 0x0a, 0x06, 0x47, 0x65,
	0x74, 0x41, 0x6c, 0x6c, 0x12, 0x17, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x41, 0x6c, 0x6c, 0x43,
	0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x15, 0x2e,
	0x67, 0x72, 0x70, 0x63, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x30, 0x01, 0x12, 0x36, 0x0a, 0x03, 0x47, 0x65, 0x74, 0x12,
	0x14, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x15, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x43, 0x6f, 0x6d,
	0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x30, 0x01,
	0x42, 0x0c, 0x5a, 0x0a, 0x2e, 0x2e, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_comment_proto_rawDescOnce sync.Once
	file_comment_proto_rawDescData = file_comment_proto_rawDesc
)

func file_comment_proto_rawDescGZIP() []byte {
	file_comment_proto_rawDescOnce.Do(func() {
		file_comment_proto_rawDescData = protoimpl.X.CompressGZIP(file_comment_proto_rawDescData)
	})
	return file_comment_proto_rawDescData
}

var file_comment_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_comment_proto_goTypes = []interface{}{
	(*BaseCommentRequest)(nil), // 0: grpc.BaseCommentRequest
	(*CommentRequest)(nil),     // 1: grpc.CommentRequest
	(*AllCommentRequest)(nil),  // 2: grpc.AllCommentRequest
	(*CommentResponse)(nil),    // 3: grpc.CommentResponse
}
var file_comment_proto_depIdxs = []int32{
	0, // 0: grpc.CommentRequest.baseCommentRequest:type_name -> grpc.BaseCommentRequest
	0, // 1: grpc.AllCommentRequest.baseCommentRequest:type_name -> grpc.BaseCommentRequest
	2, // 2: grpc.Comment.GetAll:input_type -> grpc.AllCommentRequest
	1, // 3: grpc.Comment.Get:input_type -> grpc.CommentRequest
	3, // 4: grpc.Comment.GetAll:output_type -> grpc.CommentResponse
	3, // 5: grpc.Comment.Get:output_type -> grpc.CommentResponse
	4, // [4:6] is the sub-list for method output_type
	2, // [2:4] is the sub-list for method input_type
	2, // [2:2] is the sub-list for extension type_name
	2, // [2:2] is the sub-list for extension extendee
	0, // [0:2] is the sub-list for field type_name
}

func init() { file_comment_proto_init() }
func file_comment_proto_init() {
	if File_comment_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_comment_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BaseCommentRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_comment_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommentRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_comment_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AllCommentRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_comment_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommentResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_comment_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_comment_proto_goTypes,
		DependencyIndexes: file_comment_proto_depIdxs,
		MessageInfos:      file_comment_proto_msgTypes,
	}.Build()
	File_comment_proto = out.File
	file_comment_proto_rawDesc = nil
	file_comment_proto_goTypes = nil
	file_comment_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// CommentClient is the client API for Comment service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type CommentClient interface {
	GetAll(ctx context.Context, in *AllCommentRequest, opts ...grpc.CallOption) (Comment_GetAllClient, error)
	Get(ctx context.Context, in *CommentRequest, opts ...grpc.CallOption) (Comment_GetClient, error)
}

type commentClient struct {
	cc grpc.ClientConnInterface
}

func NewCommentClient(cc grpc.ClientConnInterface) CommentClient {
	return &commentClient{cc}
}

func (c *commentClient) GetAll(ctx context.Context, in *AllCommentRequest, opts ...grpc.CallOption) (Comment_GetAllClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Comment_serviceDesc.Streams[0], "/grpc.Comment/GetAll", opts...)
	if err != nil {
		return nil, err
	}
	x := &commentGetAllClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Comment_GetAllClient interface {
	Recv() (*CommentResponse, error)
	grpc.ClientStream
}

type commentGetAllClient struct {
	grpc.ClientStream
}

func (x *commentGetAllClient) Recv() (*CommentResponse, error) {
	m := new(CommentResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *commentClient) Get(ctx context.Context, in *CommentRequest, opts ...grpc.CallOption) (Comment_GetClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Comment_serviceDesc.Streams[1], "/grpc.Comment/Get", opts...)
	if err != nil {
		return nil, err
	}
	x := &commentGetClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Comment_GetClient interface {
	Recv() (*CommentResponse, error)
	grpc.ClientStream
}

type commentGetClient struct {
	grpc.ClientStream
}

func (x *commentGetClient) Recv() (*CommentResponse, error) {
	m := new(CommentResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// CommentServer is the server API for Comment service.
type CommentServer interface {
	GetAll(*AllCommentRequest, Comment_GetAllServer) error
	Get(*CommentRequest, Comment_GetServer) error
}

// UnimplementedCommentServer can be embedded to have forward compatible implementations.
type UnimplementedCommentServer struct {
}

func (*UnimplementedCommentServer) GetAll(*AllCommentRequest, Comment_GetAllServer) error {
	return status.Errorf(codes.Unimplemented, "method GetAll not implemented")
}
func (*UnimplementedCommentServer) Get(*CommentRequest, Comment_GetServer) error {
	return status.Errorf(codes.Unimplemented, "method Get not implemented")
}

func RegisterCommentServer(s *grpc.Server, srv CommentServer) {
	s.RegisterService(&_Comment_serviceDesc, srv)
}

func _Comment_GetAll_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(AllCommentRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CommentServer).GetAll(m, &commentGetAllServer{stream})
}

type Comment_GetAllServer interface {
	Send(*CommentResponse) error
	grpc.ServerStream
}

type commentGetAllServer struct {
	grpc.ServerStream
}

func (x *commentGetAllServer) Send(m *CommentResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _Comment_Get_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(CommentRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CommentServer).Get(m, &commentGetServer{stream})
}

type Comment_GetServer interface {
	Send(*CommentResponse) error
	grpc.ServerStream
}

type commentGetServer struct {
	grpc.ServerStream
}

func (x *commentGetServer) Send(m *CommentResponse) error {
	return x.ServerStream.SendMsg(m)
}

var _Comment_serviceDesc = grpc.ServiceDesc{
	ServiceName: "grpc.Comment",
	HandlerType: (*CommentServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetAll",
			Handler:       _Comment_GetAll_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "Get",
			Handler:       _Comment_Get_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "comment.proto",
}
