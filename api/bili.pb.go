// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: bili.proto

package api

import (
	encoding_binary "encoding/binary"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type LiveStatus int32

const (
	LiveStatus_NoLiving LiveStatus = 0
	LiveStatus_Living   LiveStatus = 1
)

var LiveStatus_name = map[int32]string{
	0: "NoLiving",
	1: "Living",
}

var LiveStatus_value = map[string]int32{
	"NoLiving": 0,
	"Living":   1,
}

func (x LiveStatus) String() string {
	return proto.EnumName(LiveStatus_name, int32(x))
}

func (LiveStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_f9172f04ee093ab4, []int{0}
}

type RoundStatus int32

const (
	RoundStatus_Off RoundStatus = 0
	RoundStatus_On  RoundStatus = 1
)

var RoundStatus_name = map[int32]string{
	0: "Off",
	1: "On",
}

var RoundStatus_value = map[string]int32{
	"Off": 0,
	"On":  1,
}

func (x RoundStatus) String() string {
	return proto.EnumName(RoundStatus_name, int32(x))
}

func (RoundStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_f9172f04ee093ab4, []int{1}
}

type RoomStatus int32

const (
	RoomStatus_NonExist RoomStatus = 0
	RoomStatus_Exist    RoomStatus = 1
)

var RoomStatus_name = map[int32]string{
	0: "NonExist",
	1: "Exist",
}

var RoomStatus_value = map[string]int32{
	"NonExist": 0,
	"Exist":    1,
}

func (x RoomStatus) String() string {
	return proto.EnumName(RoomStatus_name, int32(x))
}

func (RoomStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_f9172f04ee093ab4, []int{2}
}

type SpecialType int32

const (
	SpecialType_Normal       SpecialType = 0
	SpecialType_Pay          SpecialType = 1
	SpecialType_YearFestival SpecialType = 2
)

var SpecialType_name = map[int32]string{
	0: "Normal",
	1: "Pay",
	2: "YearFestival",
}

var SpecialType_value = map[string]int32{
	"Normal":       0,
	"Pay":          1,
	"YearFestival": 2,
}

func (x SpecialType) String() string {
	return proto.EnumName(SpecialType_name, int32(x))
}

func (SpecialType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_f9172f04ee093ab4, []int{3}
}

type DynamicDescType int32

const (
	DynamicDescType_Unknown    DynamicDescType = 0
	DynamicDescType_WithOrigin DynamicDescType = 1
	DynamicDescType_WithImage  DynamicDescType = 2
	DynamicDescType_TextOnly   DynamicDescType = 4
	DynamicDescType_WithVideo  DynamicDescType = 8
	DynamicDescType_WithPost   DynamicDescType = 64
	DynamicDescType_WithMusic  DynamicDescType = 256
	DynamicDescType_WithAnime  DynamicDescType = 512
	// 该内容已经不见了哦
	DynamicDescType_WithMiss DynamicDescType = 1024
	// 评分、头像挂件，这种动态下面有一个小卡片的
	DynamicDescType_WithSketch DynamicDescType = 2048
	DynamicDescType_WithLive   DynamicDescType = 4200
	DynamicDescType_WithLiveV2 DynamicDescType = 4308
)

var DynamicDescType_name = map[int32]string{
	0:    "Unknown",
	1:    "WithOrigin",
	2:    "WithImage",
	4:    "TextOnly",
	8:    "WithVideo",
	64:   "WithPost",
	256:  "WithMusic",
	512:  "WithAnime",
	1024: "WithMiss",
	2048: "WithSketch",
	4200: "WithLive",
	4308: "WithLiveV2",
}

var DynamicDescType_value = map[string]int32{
	"Unknown":    0,
	"WithOrigin": 1,
	"WithImage":  2,
	"TextOnly":   4,
	"WithVideo":  8,
	"WithPost":   64,
	"WithMusic":  256,
	"WithAnime":  512,
	"WithMiss":   1024,
	"WithSketch": 2048,
	"WithLive":   4200,
	"WithLiveV2": 4308,
}

func (x DynamicDescType) String() string {
	return proto.EnumName(DynamicDescType_name, int32(x))
}

func (DynamicDescType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_f9172f04ee093ab4, []int{4}
}

type Sliver2CoinsStatusResponse struct {
	Code                 int32                            `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Msg                  string                           `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	Message              string                           `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`
	Data                 *Sliver2CoinsStatusResponse_Data `protobuf:"bytes,4,opt,name=data,proto3" json:"data,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                         `json:"-"`
	XXX_unrecognized     []byte                           `json:"-"`
	XXX_sizecache        int32                            `json:"-"`
}

func (m *Sliver2CoinsStatusResponse) Reset()         { *m = Sliver2CoinsStatusResponse{} }
func (m *Sliver2CoinsStatusResponse) String() string { return proto.CompactTextString(m) }
func (*Sliver2CoinsStatusResponse) ProtoMessage()    {}
func (*Sliver2CoinsStatusResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f9172f04ee093ab4, []int{0}
}
func (m *Sliver2CoinsStatusResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Sliver2CoinsStatusResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Sliver2CoinsStatusResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Sliver2CoinsStatusResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Sliver2CoinsStatusResponse.Merge(m, src)
}
func (m *Sliver2CoinsStatusResponse) XXX_Size() int {
	return m.Size()
}
func (m *Sliver2CoinsStatusResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_Sliver2CoinsStatusResponse.DiscardUnknown(m)
}

var xxx_messageInfo_Sliver2CoinsStatusResponse proto.InternalMessageInfo

func (m *Sliver2CoinsStatusResponse) GetCode() int32 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *Sliver2CoinsStatusResponse) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

func (m *Sliver2CoinsStatusResponse) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *Sliver2CoinsStatusResponse) GetData() *Sliver2CoinsStatusResponse_Data {
	if m != nil {
		return m.Data
	}
	return nil
}

type Sliver2CoinsStatusResponse_Data struct {
	Silver               int64    `protobuf:"varint,1,opt,name=silver,proto3" json:"silver,omitempty"`
	Coin                 int32    `protobuf:"varint,2,opt,name=coin,proto3" json:"coin,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Sliver2CoinsStatusResponse_Data) Reset()         { *m = Sliver2CoinsStatusResponse_Data{} }
func (m *Sliver2CoinsStatusResponse_Data) String() string { return proto.CompactTextString(m) }
func (*Sliver2CoinsStatusResponse_Data) ProtoMessage()    {}
func (*Sliver2CoinsStatusResponse_Data) Descriptor() ([]byte, []int) {
	return fileDescriptor_f9172f04ee093ab4, []int{0, 0}
}
func (m *Sliver2CoinsStatusResponse_Data) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Sliver2CoinsStatusResponse_Data) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Sliver2CoinsStatusResponse_Data.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Sliver2CoinsStatusResponse_Data) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Sliver2CoinsStatusResponse_Data.Merge(m, src)
}
func (m *Sliver2CoinsStatusResponse_Data) XXX_Size() int {
	return m.Size()
}
func (m *Sliver2CoinsStatusResponse_Data) XXX_DiscardUnknown() {
	xxx_messageInfo_Sliver2CoinsStatusResponse_Data.DiscardUnknown(m)
}

var xxx_messageInfo_Sliver2CoinsStatusResponse_Data proto.InternalMessageInfo

func (m *Sliver2CoinsStatusResponse_Data) GetSilver() int64 {
	if m != nil {
		return m.Silver
	}
	return 0
}

func (m *Sliver2CoinsStatusResponse_Data) GetCoin() int32 {
	if m != nil {
		return m.Coin
	}
	return 0
}

type BaseResponse struct {
	Code                 int32    `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Msg                  string   `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	Message              string   `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BaseResponse) Reset()         { *m = BaseResponse{} }
func (m *BaseResponse) String() string { return proto.CompactTextString(m) }
func (*BaseResponse) ProtoMessage()    {}
func (*BaseResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f9172f04ee093ab4, []int{1}
}
func (m *BaseResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BaseResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BaseResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BaseResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BaseResponse.Merge(m, src)
}
func (m *BaseResponse) XXX_Size() int {
	return m.Size()
}
func (m *BaseResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_BaseResponse.DiscardUnknown(m)
}

var xxx_messageInfo_BaseResponse proto.InternalMessageInfo

func (m *BaseResponse) GetCode() int32 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *BaseResponse) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

func (m *BaseResponse) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type RoomInitResponse struct {
	Code                 int32                  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message              string                 `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Data                 *RoomInitResponse_Data `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
	XXX_NoUnkeyedLiteral struct{}               `json:"-"`
	XXX_unrecognized     []byte                 `json:"-"`
	XXX_sizecache        int32                  `json:"-"`
}

func (m *RoomInitResponse) Reset()         { *m = RoomInitResponse{} }
func (m *RoomInitResponse) String() string { return proto.CompactTextString(m) }
func (*RoomInitResponse) ProtoMessage()    {}
func (*RoomInitResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f9172f04ee093ab4, []int{2}
}
func (m *RoomInitResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RoomInitResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RoomInitResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RoomInitResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RoomInitResponse.Merge(m, src)
}
func (m *RoomInitResponse) XXX_Size() int {
	return m.Size()
}
func (m *RoomInitResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_RoomInitResponse.DiscardUnknown(m)
}

var xxx_messageInfo_RoomInitResponse proto.InternalMessageInfo

func (m *RoomInitResponse) GetCode() int32 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *RoomInitResponse) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *RoomInitResponse) GetData() *RoomInitResponse_Data {
	if m != nil {
		return m.Data
	}
	return nil
}

type RoomInitResponse_Data struct {
	RoomId               int64      `protobuf:"varint,1,opt,name=room_id,json=roomId,proto3" json:"room_id,omitempty"`
	ShortId              int64      `protobuf:"varint,2,opt,name=short_id,json=shortId,proto3" json:"short_id,omitempty"`
	Uid                  int64      `protobuf:"varint,3,opt,name=uid,proto3" json:"uid,omitempty"`
	IsHidden             bool       `protobuf:"varint,5,opt,name=is_hidden,json=isHidden,proto3" json:"is_hidden,omitempty"`
	IsLocked             bool       `protobuf:"varint,6,opt,name=is_locked,json=isLocked,proto3" json:"is_locked,omitempty"`
	LiveStatus           LiveStatus `protobuf:"varint,8,opt,name=live_status,json=liveStatus,proto3,enum=bilibili.LiveStatus" json:"live_status,omitempty"`
	IsSp                 int32      `protobuf:"varint,15,opt,name=is_sp,json=isSp,proto3" json:"is_sp,omitempty"`
	SpecialType          int32      `protobuf:"varint,16,opt,name=special_type,json=specialType,proto3" json:"special_type,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *RoomInitResponse_Data) Reset()         { *m = RoomInitResponse_Data{} }
func (m *RoomInitResponse_Data) String() string { return proto.CompactTextString(m) }
func (*RoomInitResponse_Data) ProtoMessage()    {}
func (*RoomInitResponse_Data) Descriptor() ([]byte, []int) {
	return fileDescriptor_f9172f04ee093ab4, []int{2, 0}
}
func (m *RoomInitResponse_Data) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RoomInitResponse_Data) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RoomInitResponse_Data.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RoomInitResponse_Data) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RoomInitResponse_Data.Merge(m, src)
}
func (m *RoomInitResponse_Data) XXX_Size() int {
	return m.Size()
}
func (m *RoomInitResponse_Data) XXX_DiscardUnknown() {
	xxx_messageInfo_RoomInitResponse_Data.DiscardUnknown(m)
}

var xxx_messageInfo_RoomInitResponse_Data proto.InternalMessageInfo

func (m *RoomInitResponse_Data) GetRoomId() int64 {
	if m != nil {
		return m.RoomId
	}
	return 0
}

func (m *RoomInitResponse_Data) GetShortId() int64 {
	if m != nil {
		return m.ShortId
	}
	return 0
}

func (m *RoomInitResponse_Data) GetUid() int64 {
	if m != nil {
		return m.Uid
	}
	return 0
}

func (m *RoomInitResponse_Data) GetIsHidden() bool {
	if m != nil {
		return m.IsHidden
	}
	return false
}

func (m *RoomInitResponse_Data) GetIsLocked() bool {
	if m != nil {
		return m.IsLocked
	}
	return false
}

func (m *RoomInitResponse_Data) GetLiveStatus() LiveStatus {
	if m != nil {
		return m.LiveStatus
	}
	return LiveStatus_NoLiving
}

func (m *RoomInitResponse_Data) GetIsSp() int32 {
	if m != nil {
		return m.IsSp
	}
	return 0
}

func (m *RoomInitResponse_Data) GetSpecialType() int32 {
	if m != nil {
		return m.SpecialType
	}
	return 0
}

type XSpaceAccInfoResponse struct {
	Code                 int32                       `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message              string                      `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Data                 *XSpaceAccInfoResponse_Data `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                    `json:"-"`
	XXX_unrecognized     []byte                      `json:"-"`
	XXX_sizecache        int32                       `json:"-"`
}

func (m *XSpaceAccInfoResponse) Reset()         { *m = XSpaceAccInfoResponse{} }
func (m *XSpaceAccInfoResponse) String() string { return proto.CompactTextString(m) }
func (*XSpaceAccInfoResponse) ProtoMessage()    {}
func (*XSpaceAccInfoResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f9172f04ee093ab4, []int{3}
}
func (m *XSpaceAccInfoResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *XSpaceAccInfoResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_XSpaceAccInfoResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *XSpaceAccInfoResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_XSpaceAccInfoResponse.Merge(m, src)
}
func (m *XSpaceAccInfoResponse) XXX_Size() int {
	return m.Size()
}
func (m *XSpaceAccInfoResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_XSpaceAccInfoResponse.DiscardUnknown(m)
}

var xxx_messageInfo_XSpaceAccInfoResponse proto.InternalMessageInfo

func (m *XSpaceAccInfoResponse) GetCode() int32 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *XSpaceAccInfoResponse) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *XSpaceAccInfoResponse) GetData() *XSpaceAccInfoResponse_Data {
	if m != nil {
		return m.Data
	}
	return nil
}

type XSpaceAccInfoResponse_Data struct {
	Mid                  int64                                `protobuf:"varint,1,opt,name=mid,proto3" json:"mid,omitempty"`
	Name                 string                               `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Level                int32                                `protobuf:"varint,7,opt,name=level,proto3" json:"level,omitempty"`
	LiveRoom             *XSpaceAccInfoResponse_Data_LiveRoom `protobuf:"bytes,17,opt,name=live_room,json=liveRoom,proto3" json:"live_room,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                             `json:"-"`
	XXX_unrecognized     []byte                               `json:"-"`
	XXX_sizecache        int32                                `json:"-"`
}

func (m *XSpaceAccInfoResponse_Data) Reset()         { *m = XSpaceAccInfoResponse_Data{} }
func (m *XSpaceAccInfoResponse_Data) String() string { return proto.CompactTextString(m) }
func (*XSpaceAccInfoResponse_Data) ProtoMessage()    {}
func (*XSpaceAccInfoResponse_Data) Descriptor() ([]byte, []int) {
	return fileDescriptor_f9172f04ee093ab4, []int{3, 0}
}
func (m *XSpaceAccInfoResponse_Data) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *XSpaceAccInfoResponse_Data) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_XSpaceAccInfoResponse_Data.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *XSpaceAccInfoResponse_Data) XXX_Merge(src proto.Message) {
	xxx_messageInfo_XSpaceAccInfoResponse_Data.Merge(m, src)
}
func (m *XSpaceAccInfoResponse_Data) XXX_Size() int {
	return m.Size()
}
func (m *XSpaceAccInfoResponse_Data) XXX_DiscardUnknown() {
	xxx_messageInfo_XSpaceAccInfoResponse_Data.DiscardUnknown(m)
}

var xxx_messageInfo_XSpaceAccInfoResponse_Data proto.InternalMessageInfo

func (m *XSpaceAccInfoResponse_Data) GetMid() int64 {
	if m != nil {
		return m.Mid
	}
	return 0
}

func (m *XSpaceAccInfoResponse_Data) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *XSpaceAccInfoResponse_Data) GetLevel() int32 {
	if m != nil {
		return m.Level
	}
	return 0
}

func (m *XSpaceAccInfoResponse_Data) GetLiveRoom() *XSpaceAccInfoResponse_Data_LiveRoom {
	if m != nil {
		return m.LiveRoom
	}
	return nil
}

type XSpaceAccInfoResponse_Data_LiveRoom struct {
	RoomStatus           int32    `protobuf:"varint,1,opt,name=roomStatus,proto3" json:"roomStatus,omitempty"`
	LiveStatus           int32    `protobuf:"varint,2,opt,name=liveStatus,proto3" json:"liveStatus,omitempty"`
	Url                  string   `protobuf:"bytes,3,opt,name=url,proto3" json:"url,omitempty"`
	Title                string   `protobuf:"bytes,4,opt,name=title,proto3" json:"title,omitempty"`
	Cover                string   `protobuf:"bytes,5,opt,name=cover,proto3" json:"cover,omitempty"`
	Roomid               int64    `protobuf:"varint,6,opt,name=roomid,proto3" json:"roomid,omitempty"`
	RoundStatus          int32    `protobuf:"varint,7,opt,name=roundStatus,proto3" json:"roundStatus,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *XSpaceAccInfoResponse_Data_LiveRoom) Reset()         { *m = XSpaceAccInfoResponse_Data_LiveRoom{} }
func (m *XSpaceAccInfoResponse_Data_LiveRoom) String() string { return proto.CompactTextString(m) }
func (*XSpaceAccInfoResponse_Data_LiveRoom) ProtoMessage()    {}
func (*XSpaceAccInfoResponse_Data_LiveRoom) Descriptor() ([]byte, []int) {
	return fileDescriptor_f9172f04ee093ab4, []int{3, 0, 0}
}
func (m *XSpaceAccInfoResponse_Data_LiveRoom) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *XSpaceAccInfoResponse_Data_LiveRoom) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_XSpaceAccInfoResponse_Data_LiveRoom.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *XSpaceAccInfoResponse_Data_LiveRoom) XXX_Merge(src proto.Message) {
	xxx_messageInfo_XSpaceAccInfoResponse_Data_LiveRoom.Merge(m, src)
}
func (m *XSpaceAccInfoResponse_Data_LiveRoom) XXX_Size() int {
	return m.Size()
}
func (m *XSpaceAccInfoResponse_Data_LiveRoom) XXX_DiscardUnknown() {
	xxx_messageInfo_XSpaceAccInfoResponse_Data_LiveRoom.DiscardUnknown(m)
}

var xxx_messageInfo_XSpaceAccInfoResponse_Data_LiveRoom proto.InternalMessageInfo

func (m *XSpaceAccInfoResponse_Data_LiveRoom) GetRoomStatus() int32 {
	if m != nil {
		return m.RoomStatus
	}
	return 0
}

func (m *XSpaceAccInfoResponse_Data_LiveRoom) GetLiveStatus() int32 {
	if m != nil {
		return m.LiveStatus
	}
	return 0
}

func (m *XSpaceAccInfoResponse_Data_LiveRoom) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

func (m *XSpaceAccInfoResponse_Data_LiveRoom) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *XSpaceAccInfoResponse_Data_LiveRoom) GetCover() string {
	if m != nil {
		return m.Cover
	}
	return ""
}

func (m *XSpaceAccInfoResponse_Data_LiveRoom) GetRoomid() int64 {
	if m != nil {
		return m.Roomid
	}
	return 0
}

func (m *XSpaceAccInfoResponse_Data_LiveRoom) GetRoundStatus() int32 {
	if m != nil {
		return m.RoundStatus
	}
	return 0
}

type GetRoomInfoOldResponse struct {
	Code                 int32                        `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message              string                       `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Data                 *GetRoomInfoOldResponse_Data `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                     `json:"-"`
	XXX_unrecognized     []byte                       `json:"-"`
	XXX_sizecache        int32                        `json:"-"`
}

func (m *GetRoomInfoOldResponse) Reset()         { *m = GetRoomInfoOldResponse{} }
func (m *GetRoomInfoOldResponse) String() string { return proto.CompactTextString(m) }
func (*GetRoomInfoOldResponse) ProtoMessage()    {}
func (*GetRoomInfoOldResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f9172f04ee093ab4, []int{4}
}
func (m *GetRoomInfoOldResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetRoomInfoOldResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetRoomInfoOldResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetRoomInfoOldResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetRoomInfoOldResponse.Merge(m, src)
}
func (m *GetRoomInfoOldResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetRoomInfoOldResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetRoomInfoOldResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetRoomInfoOldResponse proto.InternalMessageInfo

func (m *GetRoomInfoOldResponse) GetCode() int32 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *GetRoomInfoOldResponse) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *GetRoomInfoOldResponse) GetData() *GetRoomInfoOldResponse_Data {
	if m != nil {
		return m.Data
	}
	return nil
}

type GetRoomInfoOldResponse_Data struct {
	RoomStatus           RoomStatus  `protobuf:"varint,1,opt,name=roomStatus,proto3,enum=bilibili.RoomStatus" json:"roomStatus,omitempty"`
	RoundStatus          RoundStatus `protobuf:"varint,2,opt,name=roundStatus,proto3,enum=bilibili.RoundStatus" json:"roundStatus,omitempty"`
	LiveStatus           LiveStatus  `protobuf:"varint,3,opt,name=liveStatus,proto3,enum=bilibili.LiveStatus" json:"liveStatus,omitempty"`
	Url                  string      `protobuf:"bytes,4,opt,name=url,proto3" json:"url,omitempty"`
	Title                string      `protobuf:"bytes,5,opt,name=title,proto3" json:"title,omitempty"`
	Cover                string      `protobuf:"bytes,6,opt,name=cover,proto3" json:"cover,omitempty"`
	Online               int64       `protobuf:"varint,7,opt,name=online,proto3" json:"online,omitempty"`
	Roomid               int64       `protobuf:"varint,8,opt,name=roomid,proto3" json:"roomid,omitempty"`
	BroadcastType        int32       `protobuf:"varint,9,opt,name=broadcast_type,json=broadcastType,proto3" json:"broadcast_type,omitempty"`
	OnlineHidden         int32       `protobuf:"varint,10,opt,name=online_hidden,json=onlineHidden,proto3" json:"online_hidden,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *GetRoomInfoOldResponse_Data) Reset()         { *m = GetRoomInfoOldResponse_Data{} }
func (m *GetRoomInfoOldResponse_Data) String() string { return proto.CompactTextString(m) }
func (*GetRoomInfoOldResponse_Data) ProtoMessage()    {}
func (*GetRoomInfoOldResponse_Data) Descriptor() ([]byte, []int) {
	return fileDescriptor_f9172f04ee093ab4, []int{4, 0}
}
func (m *GetRoomInfoOldResponse_Data) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetRoomInfoOldResponse_Data) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetRoomInfoOldResponse_Data.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetRoomInfoOldResponse_Data) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetRoomInfoOldResponse_Data.Merge(m, src)
}
func (m *GetRoomInfoOldResponse_Data) XXX_Size() int {
	return m.Size()
}
func (m *GetRoomInfoOldResponse_Data) XXX_DiscardUnknown() {
	xxx_messageInfo_GetRoomInfoOldResponse_Data.DiscardUnknown(m)
}

var xxx_messageInfo_GetRoomInfoOldResponse_Data proto.InternalMessageInfo

func (m *GetRoomInfoOldResponse_Data) GetRoomStatus() RoomStatus {
	if m != nil {
		return m.RoomStatus
	}
	return RoomStatus_NonExist
}

func (m *GetRoomInfoOldResponse_Data) GetRoundStatus() RoundStatus {
	if m != nil {
		return m.RoundStatus
	}
	return RoundStatus_Off
}

func (m *GetRoomInfoOldResponse_Data) GetLiveStatus() LiveStatus {
	if m != nil {
		return m.LiveStatus
	}
	return LiveStatus_NoLiving
}

func (m *GetRoomInfoOldResponse_Data) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

func (m *GetRoomInfoOldResponse_Data) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *GetRoomInfoOldResponse_Data) GetCover() string {
	if m != nil {
		return m.Cover
	}
	return ""
}

func (m *GetRoomInfoOldResponse_Data) GetOnline() int64 {
	if m != nil {
		return m.Online
	}
	return 0
}

func (m *GetRoomInfoOldResponse_Data) GetRoomid() int64 {
	if m != nil {
		return m.Roomid
	}
	return 0
}

func (m *GetRoomInfoOldResponse_Data) GetBroadcastType() int32 {
	if m != nil {
		return m.BroadcastType
	}
	return 0
}

func (m *GetRoomInfoOldResponse_Data) GetOnlineHidden() int32 {
	if m != nil {
		return m.OnlineHidden
	}
	return 0
}

type FeedListResponse struct {
	Code                 int32                  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message              string                 `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Data                 *FeedListResponse_Data `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
	XXX_NoUnkeyedLiteral struct{}               `json:"-"`
	XXX_unrecognized     []byte                 `json:"-"`
	XXX_sizecache        int32                  `json:"-"`
}

func (m *FeedListResponse) Reset()         { *m = FeedListResponse{} }
func (m *FeedListResponse) String() string { return proto.CompactTextString(m) }
func (*FeedListResponse) ProtoMessage()    {}
func (*FeedListResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f9172f04ee093ab4, []int{5}
}
func (m *FeedListResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FeedListResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FeedListResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FeedListResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FeedListResponse.Merge(m, src)
}
func (m *FeedListResponse) XXX_Size() int {
	return m.Size()
}
func (m *FeedListResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_FeedListResponse.DiscardUnknown(m)
}

var xxx_messageInfo_FeedListResponse proto.InternalMessageInfo

func (m *FeedListResponse) GetCode() int32 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *FeedListResponse) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *FeedListResponse) GetData() *FeedListResponse_Data {
	if m != nil {
		return m.Data
	}
	return nil
}

type FeedListResponse_Data struct {
	Result               int32                             `protobuf:"varint,1,opt,name=result,proto3" json:"result,omitempty"`
	Page                 string                            `protobuf:"bytes,2,opt,name=page,proto3" json:"page,omitempty"`
	Pagesize             string                            `protobuf:"bytes,3,opt,name=pagesize,proto3" json:"pagesize,omitempty"`
	List                 []*FeedListResponse_Data_ListInfo `protobuf:"bytes,4,rep,name=list,proto3" json:"list,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                          `json:"-"`
	XXX_unrecognized     []byte                            `json:"-"`
	XXX_sizecache        int32                             `json:"-"`
}

func (m *FeedListResponse_Data) Reset()         { *m = FeedListResponse_Data{} }
func (m *FeedListResponse_Data) String() string { return proto.CompactTextString(m) }
func (*FeedListResponse_Data) ProtoMessage()    {}
func (*FeedListResponse_Data) Descriptor() ([]byte, []int) {
	return fileDescriptor_f9172f04ee093ab4, []int{5, 0}
}
func (m *FeedListResponse_Data) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FeedListResponse_Data) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FeedListResponse_Data.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FeedListResponse_Data) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FeedListResponse_Data.Merge(m, src)
}
func (m *FeedListResponse_Data) XXX_Size() int {
	return m.Size()
}
func (m *FeedListResponse_Data) XXX_DiscardUnknown() {
	xxx_messageInfo_FeedListResponse_Data.DiscardUnknown(m)
}

var xxx_messageInfo_FeedListResponse_Data proto.InternalMessageInfo

func (m *FeedListResponse_Data) GetResult() int32 {
	if m != nil {
		return m.Result
	}
	return 0
}

func (m *FeedListResponse_Data) GetPage() string {
	if m != nil {
		return m.Page
	}
	return ""
}

func (m *FeedListResponse_Data) GetPagesize() string {
	if m != nil {
		return m.Pagesize
	}
	return ""
}

func (m *FeedListResponse_Data) GetList() []*FeedListResponse_Data_ListInfo {
	if m != nil {
		return m.List
	}
	return nil
}

type FeedListResponse_Data_ListInfo struct {
	Cover                string   `protobuf:"bytes,1,opt,name=cover,proto3" json:"cover,omitempty"`
	Face                 string   `protobuf:"bytes,2,opt,name=face,proto3" json:"face,omitempty"`
	Uname                string   `protobuf:"bytes,3,opt,name=uname,proto3" json:"uname,omitempty"`
	Title                string   `protobuf:"bytes,4,opt,name=title,proto3" json:"title,omitempty"`
	Roomid               int64    `protobuf:"varint,5,opt,name=roomid,proto3" json:"roomid,omitempty"`
	Pic                  string   `protobuf:"bytes,6,opt,name=pic,proto3" json:"pic,omitempty"`
	Online               int64    `protobuf:"varint,7,opt,name=online,proto3" json:"online,omitempty"`
	Link                 string   `protobuf:"bytes,8,opt,name=link,proto3" json:"link,omitempty"`
	Uid                  int64    `protobuf:"varint,9,opt,name=uid,proto3" json:"uid,omitempty"`
	ParentAreaId         int64    `protobuf:"varint,10,opt,name=parent_area_id,json=parentAreaId,proto3" json:"parent_area_id,omitempty"`
	AreaId               int64    `protobuf:"varint,11,opt,name=area_id,json=areaId,proto3" json:"area_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *FeedListResponse_Data_ListInfo) Reset()         { *m = FeedListResponse_Data_ListInfo{} }
func (m *FeedListResponse_Data_ListInfo) String() string { return proto.CompactTextString(m) }
func (*FeedListResponse_Data_ListInfo) ProtoMessage()    {}
func (*FeedListResponse_Data_ListInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_f9172f04ee093ab4, []int{5, 0, 0}
}
func (m *FeedListResponse_Data_ListInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FeedListResponse_Data_ListInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FeedListResponse_Data_ListInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FeedListResponse_Data_ListInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FeedListResponse_Data_ListInfo.Merge(m, src)
}
func (m *FeedListResponse_Data_ListInfo) XXX_Size() int {
	return m.Size()
}
func (m *FeedListResponse_Data_ListInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_FeedListResponse_Data_ListInfo.DiscardUnknown(m)
}

var xxx_messageInfo_FeedListResponse_Data_ListInfo proto.InternalMessageInfo

func (m *FeedListResponse_Data_ListInfo) GetCover() string {
	if m != nil {
		return m.Cover
	}
	return ""
}

func (m *FeedListResponse_Data_ListInfo) GetFace() string {
	if m != nil {
		return m.Face
	}
	return ""
}

func (m *FeedListResponse_Data_ListInfo) GetUname() string {
	if m != nil {
		return m.Uname
	}
	return ""
}

func (m *FeedListResponse_Data_ListInfo) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *FeedListResponse_Data_ListInfo) GetRoomid() int64 {
	if m != nil {
		return m.Roomid
	}
	return 0
}

func (m *FeedListResponse_Data_ListInfo) GetPic() string {
	if m != nil {
		return m.Pic
	}
	return ""
}

func (m *FeedListResponse_Data_ListInfo) GetOnline() int64 {
	if m != nil {
		return m.Online
	}
	return 0
}

func (m *FeedListResponse_Data_ListInfo) GetLink() string {
	if m != nil {
		return m.Link
	}
	return ""
}

func (m *FeedListResponse_Data_ListInfo) GetUid() int64 {
	if m != nil {
		return m.Uid
	}
	return 0
}

func (m *FeedListResponse_Data_ListInfo) GetParentAreaId() int64 {
	if m != nil {
		return m.ParentAreaId
	}
	return 0
}

func (m *FeedListResponse_Data_ListInfo) GetAreaId() int64 {
	if m != nil {
		return m.AreaId
	}
	return 0
}

type Card struct {
	Card                 string        `protobuf:"bytes,1,opt,name=card,proto3" json:"card,omitempty"`
	Desc                 *Card_Desc    `protobuf:"bytes,2,opt,name=desc,proto3" json:"desc,omitempty"`
	Extra                *Card_Extra   `protobuf:"bytes,5,opt,name=extra,proto3" json:"extra,omitempty"`
	Display              *Card_Display `protobuf:"bytes,6,opt,name=display,proto3" json:"display,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *Card) Reset()         { *m = Card{} }
func (m *Card) String() string { return proto.CompactTextString(m) }
func (*Card) ProtoMessage()    {}
func (*Card) Descriptor() ([]byte, []int) {
	return fileDescriptor_f9172f04ee093ab4, []int{6}
}
func (m *Card) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Card) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Card.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Card) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Card.Merge(m, src)
}
func (m *Card) XXX_Size() int {
	return m.Size()
}
func (m *Card) XXX_DiscardUnknown() {
	xxx_messageInfo_Card.DiscardUnknown(m)
}

var xxx_messageInfo_Card proto.InternalMessageInfo

func (m *Card) GetCard() string {
	if m != nil {
		return m.Card
	}
	return ""
}

func (m *Card) GetDesc() *Card_Desc {
	if m != nil {
		return m.Desc
	}
	return nil
}

func (m *Card) GetExtra() *Card_Extra {
	if m != nil {
		return m.Extra
	}
	return nil
}

func (m *Card) GetDisplay() *Card_Display {
	if m != nil {
		return m.Display
	}
	return nil
}

type Card_Desc struct {
	DynamicId            int64                  `protobuf:"varint,1,opt,name=dynamic_id,json=dynamicId,proto3" json:"dynamic_id,omitempty"`
	OrigDyId             int64                  `protobuf:"varint,2,opt,name=orig_dy_id,json=origDyId,proto3" json:"orig_dy_id,omitempty"`
	OrigType             DynamicDescType        `protobuf:"varint,3,opt,name=orig_type,json=origType,proto3,enum=bilibili.DynamicDescType" json:"orig_type,omitempty"`
	PreDyId              int64                  `protobuf:"varint,4,opt,name=pre_dy_id,json=preDyId,proto3" json:"pre_dy_id,omitempty"`
	Comment              int32                  `protobuf:"varint,5,opt,name=comment,proto3" json:"comment,omitempty"`
	Like                 int32                  `protobuf:"varint,6,opt,name=like,proto3" json:"like,omitempty"`
	View                 int32                  `protobuf:"varint,7,opt,name=view,proto3" json:"view,omitempty"`
	Repost               int32                  `protobuf:"varint,8,opt,name=repost,proto3" json:"repost,omitempty"`
	Timestamp            int32                  `protobuf:"varint,9,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Type                 DynamicDescType        `protobuf:"varint,10,opt,name=type,proto3,enum=bilibili.DynamicDescType" json:"type,omitempty"`
	Bvid                 string                 `protobuf:"bytes,11,opt,name=bvid,proto3" json:"bvid,omitempty"`
	DynamicIdStr         string                 `protobuf:"bytes,12,opt,name=dynamic_id_str,json=dynamicIdStr,proto3" json:"dynamic_id_str,omitempty"`
	Uid                  int64                  `protobuf:"varint,13,opt,name=uid,proto3" json:"uid,omitempty"`
	UserProfile          *Card_Desc_UserProfile `protobuf:"bytes,14,opt,name=user_profile,json=userProfile,proto3" json:"user_profile,omitempty"`
	XXX_NoUnkeyedLiteral struct{}               `json:"-"`
	XXX_unrecognized     []byte                 `json:"-"`
	XXX_sizecache        int32                  `json:"-"`
}

func (m *Card_Desc) Reset()         { *m = Card_Desc{} }
func (m *Card_Desc) String() string { return proto.CompactTextString(m) }
func (*Card_Desc) ProtoMessage()    {}
func (*Card_Desc) Descriptor() ([]byte, []int) {
	return fileDescriptor_f9172f04ee093ab4, []int{6, 0}
}
func (m *Card_Desc) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Card_Desc) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Card_Desc.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Card_Desc) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Card_Desc.Merge(m, src)
}
func (m *Card_Desc) XXX_Size() int {
	return m.Size()
}
func (m *Card_Desc) XXX_DiscardUnknown() {
	xxx_messageInfo_Card_Desc.DiscardUnknown(m)
}

var xxx_messageInfo_Card_Desc proto.InternalMessageInfo

func (m *Card_Desc) GetDynamicId() int64 {
	if m != nil {
		return m.DynamicId
	}
	return 0
}

func (m *Card_Desc) GetOrigDyId() int64 {
	if m != nil {
		return m.OrigDyId
	}
	return 0
}

func (m *Card_Desc) GetOrigType() DynamicDescType {
	if m != nil {
		return m.OrigType
	}
	return DynamicDescType_Unknown
}

func (m *Card_Desc) GetPreDyId() int64 {
	if m != nil {
		return m.PreDyId
	}
	return 0
}

func (m *Card_Desc) GetComment() int32 {
	if m != nil {
		return m.Comment
	}
	return 0
}

func (m *Card_Desc) GetLike() int32 {
	if m != nil {
		return m.Like
	}
	return 0
}

func (m *Card_Desc) GetView() int32 {
	if m != nil {
		return m.View
	}
	return 0
}

func (m *Card_Desc) GetRepost() int32 {
	if m != nil {
		return m.Repost
	}
	return 0
}

func (m *Card_Desc) GetTimestamp() int32 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func (m *Card_Desc) GetType() DynamicDescType {
	if m != nil {
		return m.Type
	}
	return DynamicDescType_Unknown
}

func (m *Card_Desc) GetBvid() string {
	if m != nil {
		return m.Bvid
	}
	return ""
}

func (m *Card_Desc) GetDynamicIdStr() string {
	if m != nil {
		return m.DynamicIdStr
	}
	return ""
}

func (m *Card_Desc) GetUid() int64 {
	if m != nil {
		return m.Uid
	}
	return 0
}

func (m *Card_Desc) GetUserProfile() *Card_Desc_UserProfile {
	if m != nil {
		return m.UserProfile
	}
	return nil
}

type Card_Desc_UserProfile struct {
	Info                 *Card_Desc_UserProfile_Info `protobuf:"bytes,1,opt,name=info,proto3" json:"info,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                    `json:"-"`
	XXX_unrecognized     []byte                      `json:"-"`
	XXX_sizecache        int32                       `json:"-"`
}

func (m *Card_Desc_UserProfile) Reset()         { *m = Card_Desc_UserProfile{} }
func (m *Card_Desc_UserProfile) String() string { return proto.CompactTextString(m) }
func (*Card_Desc_UserProfile) ProtoMessage()    {}
func (*Card_Desc_UserProfile) Descriptor() ([]byte, []int) {
	return fileDescriptor_f9172f04ee093ab4, []int{6, 0, 0}
}
func (m *Card_Desc_UserProfile) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Card_Desc_UserProfile) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Card_Desc_UserProfile.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Card_Desc_UserProfile) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Card_Desc_UserProfile.Merge(m, src)
}
func (m *Card_Desc_UserProfile) XXX_Size() int {
	return m.Size()
}
func (m *Card_Desc_UserProfile) XXX_DiscardUnknown() {
	xxx_messageInfo_Card_Desc_UserProfile.DiscardUnknown(m)
}

var xxx_messageInfo_Card_Desc_UserProfile proto.InternalMessageInfo

func (m *Card_Desc_UserProfile) GetInfo() *Card_Desc_UserProfile_Info {
	if m != nil {
		return m.Info
	}
	return nil
}

type Card_Desc_UserProfile_Info struct {
	Uname                string   `protobuf:"bytes,1,opt,name=uname,proto3" json:"uname,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Card_Desc_UserProfile_Info) Reset()         { *m = Card_Desc_UserProfile_Info{} }
func (m *Card_Desc_UserProfile_Info) String() string { return proto.CompactTextString(m) }
func (*Card_Desc_UserProfile_Info) ProtoMessage()    {}
func (*Card_Desc_UserProfile_Info) Descriptor() ([]byte, []int) {
	return fileDescriptor_f9172f04ee093ab4, []int{6, 0, 0, 0}
}
func (m *Card_Desc_UserProfile_Info) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Card_Desc_UserProfile_Info) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Card_Desc_UserProfile_Info.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Card_Desc_UserProfile_Info) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Card_Desc_UserProfile_Info.Merge(m, src)
}
func (m *Card_Desc_UserProfile_Info) XXX_Size() int {
	return m.Size()
}
func (m *Card_Desc_UserProfile_Info) XXX_DiscardUnknown() {
	xxx_messageInfo_Card_Desc_UserProfile_Info.DiscardUnknown(m)
}

var xxx_messageInfo_Card_Desc_UserProfile_Info proto.InternalMessageInfo

func (m *Card_Desc_UserProfile_Info) GetUname() string {
	if m != nil {
		return m.Uname
	}
	return ""
}

type Card_Extra struct {
	IsSpaceTop           int32    `protobuf:"varint,1,opt,name=is_space_top,json=isSpaceTop,proto3" json:"is_space_top,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Card_Extra) Reset()         { *m = Card_Extra{} }
func (m *Card_Extra) String() string { return proto.CompactTextString(m) }
func (*Card_Extra) ProtoMessage()    {}
func (*Card_Extra) Descriptor() ([]byte, []int) {
	return fileDescriptor_f9172f04ee093ab4, []int{6, 1}
}
func (m *Card_Extra) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Card_Extra) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Card_Extra.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Card_Extra) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Card_Extra.Merge(m, src)
}
func (m *Card_Extra) XXX_Size() int {
	return m.Size()
}
func (m *Card_Extra) XXX_DiscardUnknown() {
	xxx_messageInfo_Card_Extra.DiscardUnknown(m)
}

var xxx_messageInfo_Card_Extra proto.InternalMessageInfo

func (m *Card_Extra) GetIsSpaceTop() int32 {
	if m != nil {
		return m.IsSpaceTop
	}
	return 0
}

type Card_Display struct {
	EmojiInfo            *Card_Display_EmojiInfo `protobuf:"bytes,1,opt,name=emoji_info,json=emojiInfo,proto3" json:"emoji_info,omitempty"`
	Origin               *Card_Display_Origin    `protobuf:"bytes,2,opt,name=origin,proto3" json:"origin,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                `json:"-"`
	XXX_unrecognized     []byte                  `json:"-"`
	XXX_sizecache        int32                   `json:"-"`
}

func (m *Card_Display) Reset()         { *m = Card_Display{} }
func (m *Card_Display) String() string { return proto.CompactTextString(m) }
func (*Card_Display) ProtoMessage()    {}
func (*Card_Display) Descriptor() ([]byte, []int) {
	return fileDescriptor_f9172f04ee093ab4, []int{6, 2}
}
func (m *Card_Display) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Card_Display) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Card_Display.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Card_Display) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Card_Display.Merge(m, src)
}
func (m *Card_Display) XXX_Size() int {
	return m.Size()
}
func (m *Card_Display) XXX_DiscardUnknown() {
	xxx_messageInfo_Card_Display.DiscardUnknown(m)
}

var xxx_messageInfo_Card_Display proto.InternalMessageInfo

func (m *Card_Display) GetEmojiInfo() *Card_Display_EmojiInfo {
	if m != nil {
		return m.EmojiInfo
	}
	return nil
}

func (m *Card_Display) GetOrigin() *Card_Display_Origin {
	if m != nil {
		return m.Origin
	}
	return nil
}

type Card_Display_EmojiInfo struct {
	EmojiDetails         []*Card_Display_EmojiInfo_EmojiDetail `protobuf:"bytes,1,rep,name=emoji_details,json=emojiDetails,proto3" json:"emoji_details,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                              `json:"-"`
	XXX_unrecognized     []byte                                `json:"-"`
	XXX_sizecache        int32                                 `json:"-"`
}

func (m *Card_Display_EmojiInfo) Reset()         { *m = Card_Display_EmojiInfo{} }
func (m *Card_Display_EmojiInfo) String() string { return proto.CompactTextString(m) }
func (*Card_Display_EmojiInfo) ProtoMessage()    {}
func (*Card_Display_EmojiInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_f9172f04ee093ab4, []int{6, 2, 0}
}
func (m *Card_Display_EmojiInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Card_Display_EmojiInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Card_Display_EmojiInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Card_Display_EmojiInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Card_Display_EmojiInfo.Merge(m, src)
}
func (m *Card_Display_EmojiInfo) XXX_Size() int {
	return m.Size()
}
func (m *Card_Display_EmojiInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_Card_Display_EmojiInfo.DiscardUnknown(m)
}

var xxx_messageInfo_Card_Display_EmojiInfo proto.InternalMessageInfo

func (m *Card_Display_EmojiInfo) GetEmojiDetails() []*Card_Display_EmojiInfo_EmojiDetail {
	if m != nil {
		return m.EmojiDetails
	}
	return nil
}

type Card_Display_EmojiInfo_EmojiDetail struct {
	EmojiName            string   `protobuf:"bytes,1,opt,name=emoji_name,json=emojiName,proto3" json:"emoji_name,omitempty"`
	Id                   int32    `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
	PackageId            int32    `protobuf:"varint,3,opt,name=package_id,json=packageId,proto3" json:"package_id,omitempty"`
	State                int32    `protobuf:"varint,4,opt,name=state,proto3" json:"state,omitempty"`
	Type                 int32    `protobuf:"varint,5,opt,name=type,proto3" json:"type,omitempty"`
	Text                 string   `protobuf:"bytes,6,opt,name=text,proto3" json:"text,omitempty"`
	Url                  string   `protobuf:"bytes,7,opt,name=url,proto3" json:"url,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Card_Display_EmojiInfo_EmojiDetail) Reset()         { *m = Card_Display_EmojiInfo_EmojiDetail{} }
func (m *Card_Display_EmojiInfo_EmojiDetail) String() string { return proto.CompactTextString(m) }
func (*Card_Display_EmojiInfo_EmojiDetail) ProtoMessage()    {}
func (*Card_Display_EmojiInfo_EmojiDetail) Descriptor() ([]byte, []int) {
	return fileDescriptor_f9172f04ee093ab4, []int{6, 2, 0, 0}
}
func (m *Card_Display_EmojiInfo_EmojiDetail) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Card_Display_EmojiInfo_EmojiDetail) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Card_Display_EmojiInfo_EmojiDetail.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Card_Display_EmojiInfo_EmojiDetail) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Card_Display_EmojiInfo_EmojiDetail.Merge(m, src)
}
func (m *Card_Display_EmojiInfo_EmojiDetail) XXX_Size() int {
	return m.Size()
}
func (m *Card_Display_EmojiInfo_EmojiDetail) XXX_DiscardUnknown() {
	xxx_messageInfo_Card_Display_EmojiInfo_EmojiDetail.DiscardUnknown(m)
}

var xxx_messageInfo_Card_Display_EmojiInfo_EmojiDetail proto.InternalMessageInfo

func (m *Card_Display_EmojiInfo_EmojiDetail) GetEmojiName() string {
	if m != nil {
		return m.EmojiName
	}
	return ""
}

func (m *Card_Display_EmojiInfo_EmojiDetail) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Card_Display_EmojiInfo_EmojiDetail) GetPackageId() int32 {
	if m != nil {
		return m.PackageId
	}
	return 0
}

func (m *Card_Display_EmojiInfo_EmojiDetail) GetState() int32 {
	if m != nil {
		return m.State
	}
	return 0
}

func (m *Card_Display_EmojiInfo_EmojiDetail) GetType() int32 {
	if m != nil {
		return m.Type
	}
	return 0
}

func (m *Card_Display_EmojiInfo_EmojiDetail) GetText() string {
	if m != nil {
		return m.Text
	}
	return ""
}

func (m *Card_Display_EmojiInfo_EmojiDetail) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

type Card_Display_Origin struct {
	EmojiInfo            *Card_Display_EmojiInfo `protobuf:"bytes,1,opt,name=emoji_info,json=emojiInfo,proto3" json:"emoji_info,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                `json:"-"`
	XXX_unrecognized     []byte                  `json:"-"`
	XXX_sizecache        int32                   `json:"-"`
}

func (m *Card_Display_Origin) Reset()         { *m = Card_Display_Origin{} }
func (m *Card_Display_Origin) String() string { return proto.CompactTextString(m) }
func (*Card_Display_Origin) ProtoMessage()    {}
func (*Card_Display_Origin) Descriptor() ([]byte, []int) {
	return fileDescriptor_f9172f04ee093ab4, []int{6, 2, 1}
}
func (m *Card_Display_Origin) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Card_Display_Origin) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Card_Display_Origin.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Card_Display_Origin) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Card_Display_Origin.Merge(m, src)
}
func (m *Card_Display_Origin) XXX_Size() int {
	return m.Size()
}
func (m *Card_Display_Origin) XXX_DiscardUnknown() {
	xxx_messageInfo_Card_Display_Origin.DiscardUnknown(m)
}

var xxx_messageInfo_Card_Display_Origin proto.InternalMessageInfo

func (m *Card_Display_Origin) GetEmojiInfo() *Card_Display_EmojiInfo {
	if m != nil {
		return m.EmojiInfo
	}
	return nil
}

type DynamicSvrSpaceHistoryResponse struct {
	Code                 int32                                `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message              string                               `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Data                 *DynamicSvrSpaceHistoryResponse_Data `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                             `json:"-"`
	XXX_unrecognized     []byte                               `json:"-"`
	XXX_sizecache        int32                                `json:"-"`
}

func (m *DynamicSvrSpaceHistoryResponse) Reset()         { *m = DynamicSvrSpaceHistoryResponse{} }
func (m *DynamicSvrSpaceHistoryResponse) String() string { return proto.CompactTextString(m) }
func (*DynamicSvrSpaceHistoryResponse) ProtoMessage()    {}
func (*DynamicSvrSpaceHistoryResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f9172f04ee093ab4, []int{7}
}
func (m *DynamicSvrSpaceHistoryResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DynamicSvrSpaceHistoryResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DynamicSvrSpaceHistoryResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DynamicSvrSpaceHistoryResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DynamicSvrSpaceHistoryResponse.Merge(m, src)
}
func (m *DynamicSvrSpaceHistoryResponse) XXX_Size() int {
	return m.Size()
}
func (m *DynamicSvrSpaceHistoryResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_DynamicSvrSpaceHistoryResponse.DiscardUnknown(m)
}

var xxx_messageInfo_DynamicSvrSpaceHistoryResponse proto.InternalMessageInfo

func (m *DynamicSvrSpaceHistoryResponse) GetCode() int32 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *DynamicSvrSpaceHistoryResponse) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *DynamicSvrSpaceHistoryResponse) GetData() *DynamicSvrSpaceHistoryResponse_Data {
	if m != nil {
		return m.Data
	}
	return nil
}

type DynamicSvrSpaceHistoryResponse_Data struct {
	Cards                []*Card  `protobuf:"bytes,1,rep,name=cards,proto3" json:"cards,omitempty"`
	HasMore              int32    `protobuf:"varint,2,opt,name=has_more,json=hasMore,proto3" json:"has_more,omitempty"`
	NextOffset           int64    `protobuf:"varint,3,opt,name=next_offset,json=nextOffset,proto3" json:"next_offset,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DynamicSvrSpaceHistoryResponse_Data) Reset()         { *m = DynamicSvrSpaceHistoryResponse_Data{} }
func (m *DynamicSvrSpaceHistoryResponse_Data) String() string { return proto.CompactTextString(m) }
func (*DynamicSvrSpaceHistoryResponse_Data) ProtoMessage()    {}
func (*DynamicSvrSpaceHistoryResponse_Data) Descriptor() ([]byte, []int) {
	return fileDescriptor_f9172f04ee093ab4, []int{7, 0}
}
func (m *DynamicSvrSpaceHistoryResponse_Data) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DynamicSvrSpaceHistoryResponse_Data) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DynamicSvrSpaceHistoryResponse_Data.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DynamicSvrSpaceHistoryResponse_Data) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DynamicSvrSpaceHistoryResponse_Data.Merge(m, src)
}
func (m *DynamicSvrSpaceHistoryResponse_Data) XXX_Size() int {
	return m.Size()
}
func (m *DynamicSvrSpaceHistoryResponse_Data) XXX_DiscardUnknown() {
	xxx_messageInfo_DynamicSvrSpaceHistoryResponse_Data.DiscardUnknown(m)
}

var xxx_messageInfo_DynamicSvrSpaceHistoryResponse_Data proto.InternalMessageInfo

func (m *DynamicSvrSpaceHistoryResponse_Data) GetCards() []*Card {
	if m != nil {
		return m.Cards
	}
	return nil
}

func (m *DynamicSvrSpaceHistoryResponse_Data) GetHasMore() int32 {
	if m != nil {
		return m.HasMore
	}
	return 0
}

func (m *DynamicSvrSpaceHistoryResponse_Data) GetNextOffset() int64 {
	if m != nil {
		return m.NextOffset
	}
	return 0
}

type DynamicSvrDynamicNewResponse struct {
	Code                 int32                              `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message              string                             `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Data                 *DynamicSvrDynamicNewResponse_Data `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                           `json:"-"`
	XXX_unrecognized     []byte                             `json:"-"`
	XXX_sizecache        int32                              `json:"-"`
}

func (m *DynamicSvrDynamicNewResponse) Reset()         { *m = DynamicSvrDynamicNewResponse{} }
func (m *DynamicSvrDynamicNewResponse) String() string { return proto.CompactTextString(m) }
func (*DynamicSvrDynamicNewResponse) ProtoMessage()    {}
func (*DynamicSvrDynamicNewResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f9172f04ee093ab4, []int{8}
}
func (m *DynamicSvrDynamicNewResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DynamicSvrDynamicNewResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DynamicSvrDynamicNewResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DynamicSvrDynamicNewResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DynamicSvrDynamicNewResponse.Merge(m, src)
}
func (m *DynamicSvrDynamicNewResponse) XXX_Size() int {
	return m.Size()
}
func (m *DynamicSvrDynamicNewResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_DynamicSvrDynamicNewResponse.DiscardUnknown(m)
}

var xxx_messageInfo_DynamicSvrDynamicNewResponse proto.InternalMessageInfo

func (m *DynamicSvrDynamicNewResponse) GetCode() int32 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *DynamicSvrDynamicNewResponse) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *DynamicSvrDynamicNewResponse) GetData() *DynamicSvrDynamicNewResponse_Data {
	if m != nil {
		return m.Data
	}
	return nil
}

type DynamicSvrDynamicNewResponse_Data struct {
	NewNum               int32    `protobuf:"varint,1,opt,name=new_num,json=newNum,proto3" json:"new_num,omitempty"`
	ExistGap             int32    `protobuf:"varint,2,opt,name=exist_gap,json=existGap,proto3" json:"exist_gap,omitempty"`
	UpdateNum            int32    `protobuf:"varint,3,opt,name=update_num,json=updateNum,proto3" json:"update_num,omitempty"`
	OpenRcmd             int32    `protobuf:"varint,4,opt,name=open_rcmd,json=openRcmd,proto3" json:"open_rcmd,omitempty"`
	Cards                []*Card  `protobuf:"bytes,5,rep,name=cards,proto3" json:"cards,omitempty"`
	MaxDynamicId         int64    `protobuf:"varint,6,opt,name=max_dynamic_id,json=maxDynamicId,proto3" json:"max_dynamic_id,omitempty"`
	HistoryOffset        int64    `protobuf:"varint,7,opt,name=history_offset,json=historyOffset,proto3" json:"history_offset,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DynamicSvrDynamicNewResponse_Data) Reset()         { *m = DynamicSvrDynamicNewResponse_Data{} }
func (m *DynamicSvrDynamicNewResponse_Data) String() string { return proto.CompactTextString(m) }
func (*DynamicSvrDynamicNewResponse_Data) ProtoMessage()    {}
func (*DynamicSvrDynamicNewResponse_Data) Descriptor() ([]byte, []int) {
	return fileDescriptor_f9172f04ee093ab4, []int{8, 0}
}
func (m *DynamicSvrDynamicNewResponse_Data) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DynamicSvrDynamicNewResponse_Data) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DynamicSvrDynamicNewResponse_Data.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DynamicSvrDynamicNewResponse_Data) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DynamicSvrDynamicNewResponse_Data.Merge(m, src)
}
func (m *DynamicSvrDynamicNewResponse_Data) XXX_Size() int {
	return m.Size()
}
func (m *DynamicSvrDynamicNewResponse_Data) XXX_DiscardUnknown() {
	xxx_messageInfo_DynamicSvrDynamicNewResponse_Data.DiscardUnknown(m)
}

var xxx_messageInfo_DynamicSvrDynamicNewResponse_Data proto.InternalMessageInfo

func (m *DynamicSvrDynamicNewResponse_Data) GetNewNum() int32 {
	if m != nil {
		return m.NewNum
	}
	return 0
}

func (m *DynamicSvrDynamicNewResponse_Data) GetExistGap() int32 {
	if m != nil {
		return m.ExistGap
	}
	return 0
}

func (m *DynamicSvrDynamicNewResponse_Data) GetUpdateNum() int32 {
	if m != nil {
		return m.UpdateNum
	}
	return 0
}

func (m *DynamicSvrDynamicNewResponse_Data) GetOpenRcmd() int32 {
	if m != nil {
		return m.OpenRcmd
	}
	return 0
}

func (m *DynamicSvrDynamicNewResponse_Data) GetCards() []*Card {
	if m != nil {
		return m.Cards
	}
	return nil
}

func (m *DynamicSvrDynamicNewResponse_Data) GetMaxDynamicId() int64 {
	if m != nil {
		return m.MaxDynamicId
	}
	return 0
}

func (m *DynamicSvrDynamicNewResponse_Data) GetHistoryOffset() int64 {
	if m != nil {
		return m.HistoryOffset
	}
	return 0
}

type RelationModifyResponse struct {
	Code                 int32    `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message              string   `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Ttl                  int64    `protobuf:"varint,3,opt,name=ttl,proto3" json:"ttl,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RelationModifyResponse) Reset()         { *m = RelationModifyResponse{} }
func (m *RelationModifyResponse) String() string { return proto.CompactTextString(m) }
func (*RelationModifyResponse) ProtoMessage()    {}
func (*RelationModifyResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f9172f04ee093ab4, []int{9}
}
func (m *RelationModifyResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RelationModifyResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RelationModifyResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RelationModifyResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RelationModifyResponse.Merge(m, src)
}
func (m *RelationModifyResponse) XXX_Size() int {
	return m.Size()
}
func (m *RelationModifyResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_RelationModifyResponse.DiscardUnknown(m)
}

var xxx_messageInfo_RelationModifyResponse proto.InternalMessageInfo

func (m *RelationModifyResponse) GetCode() int32 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *RelationModifyResponse) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *RelationModifyResponse) GetTtl() int64 {
	if m != nil {
		return m.Ttl
	}
	return 0
}

type GetAttentionListResponse struct {
	Code                 int32                          `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message              string                         `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Data                 *GetAttentionListResponse_Data `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                       `json:"-"`
	XXX_unrecognized     []byte                         `json:"-"`
	XXX_sizecache        int32                          `json:"-"`
}

func (m *GetAttentionListResponse) Reset()         { *m = GetAttentionListResponse{} }
func (m *GetAttentionListResponse) String() string { return proto.CompactTextString(m) }
func (*GetAttentionListResponse) ProtoMessage()    {}
func (*GetAttentionListResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f9172f04ee093ab4, []int{10}
}
func (m *GetAttentionListResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetAttentionListResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetAttentionListResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetAttentionListResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetAttentionListResponse.Merge(m, src)
}
func (m *GetAttentionListResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetAttentionListResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetAttentionListResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetAttentionListResponse proto.InternalMessageInfo

func (m *GetAttentionListResponse) GetCode() int32 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *GetAttentionListResponse) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *GetAttentionListResponse) GetData() *GetAttentionListResponse_Data {
	if m != nil {
		return m.Data
	}
	return nil
}

type GetAttentionListResponse_Data struct {
	List                 []int64  `protobuf:"varint,1,rep,packed,name=list,proto3" json:"list,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetAttentionListResponse_Data) Reset()         { *m = GetAttentionListResponse_Data{} }
func (m *GetAttentionListResponse_Data) String() string { return proto.CompactTextString(m) }
func (*GetAttentionListResponse_Data) ProtoMessage()    {}
func (*GetAttentionListResponse_Data) Descriptor() ([]byte, []int) {
	return fileDescriptor_f9172f04ee093ab4, []int{10, 0}
}
func (m *GetAttentionListResponse_Data) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetAttentionListResponse_Data) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetAttentionListResponse_Data.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetAttentionListResponse_Data) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetAttentionListResponse_Data.Merge(m, src)
}
func (m *GetAttentionListResponse_Data) XXX_Size() int {
	return m.Size()
}
func (m *GetAttentionListResponse_Data) XXX_DiscardUnknown() {
	xxx_messageInfo_GetAttentionListResponse_Data.DiscardUnknown(m)
}

var xxx_messageInfo_GetAttentionListResponse_Data proto.InternalMessageInfo

func (m *GetAttentionListResponse_Data) GetList() []int64 {
	if m != nil {
		return m.List
	}
	return nil
}

type CardWithImage struct {
	Item                 *CardWithImage_Item `protobuf:"bytes,1,opt,name=item,proto3" json:"item,omitempty"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *CardWithImage) Reset()         { *m = CardWithImage{} }
func (m *CardWithImage) String() string { return proto.CompactTextString(m) }
func (*CardWithImage) ProtoMessage()    {}
func (*CardWithImage) Descriptor() ([]byte, []int) {
	return fileDescriptor_f9172f04ee093ab4, []int{11}
}
func (m *CardWithImage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CardWithImage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CardWithImage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CardWithImage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CardWithImage.Merge(m, src)
}
func (m *CardWithImage) XXX_Size() int {
	return m.Size()
}
func (m *CardWithImage) XXX_DiscardUnknown() {
	xxx_messageInfo_CardWithImage.DiscardUnknown(m)
}

var xxx_messageInfo_CardWithImage proto.InternalMessageInfo

func (m *CardWithImage) GetItem() *CardWithImage_Item {
	if m != nil {
		return m.Item
	}
	return nil
}

type CardWithImage_Item struct {
	Id                   int64                         `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Title                string                        `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	Description          string                        `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	Category             string                        `protobuf:"bytes,4,opt,name=category,proto3" json:"category,omitempty"`
	Pictures             []*CardWithImage_Item_Picture `protobuf:"bytes,5,rep,name=pictures,proto3" json:"pictures,omitempty"`
	PicturesCount        int32                         `protobuf:"varint,6,opt,name=pictures_count,json=picturesCount,proto3" json:"pictures_count,omitempty"`
	UploadTime           int64                         `protobuf:"varint,7,opt,name=upload_time,json=uploadTime,proto3" json:"upload_time,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                      `json:"-"`
	XXX_unrecognized     []byte                        `json:"-"`
	XXX_sizecache        int32                         `json:"-"`
}

func (m *CardWithImage_Item) Reset()         { *m = CardWithImage_Item{} }
func (m *CardWithImage_Item) String() string { return proto.CompactTextString(m) }
func (*CardWithImage_Item) ProtoMessage()    {}
func (*CardWithImage_Item) Descriptor() ([]byte, []int) {
	return fileDescriptor_f9172f04ee093ab4, []int{11, 0}
}
func (m *CardWithImage_Item) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CardWithImage_Item) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CardWithImage_Item.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CardWithImage_Item) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CardWithImage_Item.Merge(m, src)
}
func (m *CardWithImage_Item) XXX_Size() int {
	return m.Size()
}
func (m *CardWithImage_Item) XXX_DiscardUnknown() {
	xxx_messageInfo_CardWithImage_Item.DiscardUnknown(m)
}

var xxx_messageInfo_CardWithImage_Item proto.InternalMessageInfo

func (m *CardWithImage_Item) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *CardWithImage_Item) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *CardWithImage_Item) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *CardWithImage_Item) GetCategory() string {
	if m != nil {
		return m.Category
	}
	return ""
}

func (m *CardWithImage_Item) GetPictures() []*CardWithImage_Item_Picture {
	if m != nil {
		return m.Pictures
	}
	return nil
}

func (m *CardWithImage_Item) GetPicturesCount() int32 {
	if m != nil {
		return m.PicturesCount
	}
	return 0
}

func (m *CardWithImage_Item) GetUploadTime() int64 {
	if m != nil {
		return m.UploadTime
	}
	return 0
}

type CardWithImage_Item_Picture struct {
	ImgSrc               string   `protobuf:"bytes,1,opt,name=img_src,json=imgSrc,proto3" json:"img_src,omitempty"`
	ImgWidth             int32    `protobuf:"varint,2,opt,name=img_width,json=imgWidth,proto3" json:"img_width,omitempty"`
	ImgHeight            int32    `protobuf:"varint,3,opt,name=img_height,json=imgHeight,proto3" json:"img_height,omitempty"`
	ImgSize              float32  `protobuf:"fixed32,4,opt,name=img_size,json=imgSize,proto3" json:"img_size,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CardWithImage_Item_Picture) Reset()         { *m = CardWithImage_Item_Picture{} }
func (m *CardWithImage_Item_Picture) String() string { return proto.CompactTextString(m) }
func (*CardWithImage_Item_Picture) ProtoMessage()    {}
func (*CardWithImage_Item_Picture) Descriptor() ([]byte, []int) {
	return fileDescriptor_f9172f04ee093ab4, []int{11, 0, 0}
}
func (m *CardWithImage_Item_Picture) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CardWithImage_Item_Picture) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CardWithImage_Item_Picture.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CardWithImage_Item_Picture) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CardWithImage_Item_Picture.Merge(m, src)
}
func (m *CardWithImage_Item_Picture) XXX_Size() int {
	return m.Size()
}
func (m *CardWithImage_Item_Picture) XXX_DiscardUnknown() {
	xxx_messageInfo_CardWithImage_Item_Picture.DiscardUnknown(m)
}

var xxx_messageInfo_CardWithImage_Item_Picture proto.InternalMessageInfo

func (m *CardWithImage_Item_Picture) GetImgSrc() string {
	if m != nil {
		return m.ImgSrc
	}
	return ""
}

func (m *CardWithImage_Item_Picture) GetImgWidth() int32 {
	if m != nil {
		return m.ImgWidth
	}
	return 0
}

func (m *CardWithImage_Item_Picture) GetImgHeight() int32 {
	if m != nil {
		return m.ImgHeight
	}
	return 0
}

func (m *CardWithImage_Item_Picture) GetImgSize() float32 {
	if m != nil {
		return m.ImgSize
	}
	return 0
}

type CardWithOrig struct {
	Item                 *CardWithOrig_Item       `protobuf:"bytes,1,opt,name=item,proto3" json:"item,omitempty"`
	Origin               string                   `protobuf:"bytes,2,opt,name=origin,proto3" json:"origin,omitempty"`
	OriginUser           *CardWithOrig_OriginUser `protobuf:"bytes,3,opt,name=origin_user,json=originUser,proto3" json:"origin_user,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                 `json:"-"`
	XXX_unrecognized     []byte                   `json:"-"`
	XXX_sizecache        int32                    `json:"-"`
}

func (m *CardWithOrig) Reset()         { *m = CardWithOrig{} }
func (m *CardWithOrig) String() string { return proto.CompactTextString(m) }
func (*CardWithOrig) ProtoMessage()    {}
func (*CardWithOrig) Descriptor() ([]byte, []int) {
	return fileDescriptor_f9172f04ee093ab4, []int{12}
}
func (m *CardWithOrig) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CardWithOrig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CardWithOrig.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CardWithOrig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CardWithOrig.Merge(m, src)
}
func (m *CardWithOrig) XXX_Size() int {
	return m.Size()
}
func (m *CardWithOrig) XXX_DiscardUnknown() {
	xxx_messageInfo_CardWithOrig.DiscardUnknown(m)
}

var xxx_messageInfo_CardWithOrig proto.InternalMessageInfo

func (m *CardWithOrig) GetItem() *CardWithOrig_Item {
	if m != nil {
		return m.Item
	}
	return nil
}

func (m *CardWithOrig) GetOrigin() string {
	if m != nil {
		return m.Origin
	}
	return ""
}

func (m *CardWithOrig) GetOriginUser() *CardWithOrig_OriginUser {
	if m != nil {
		return m.OriginUser
	}
	return nil
}

type CardWithOrig_Item struct {
	Content              string          `protobuf:"bytes,1,opt,name=content,proto3" json:"content,omitempty"`
	Timestamp            int64           `protobuf:"varint,2,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	OrigType             DynamicDescType `protobuf:"varint,3,opt,name=orig_type,json=origType,proto3,enum=bilibili.DynamicDescType" json:"orig_type,omitempty"`
	Reply                int64           `protobuf:"varint,4,opt,name=reply,proto3" json:"reply,omitempty"`
	Miss                 int64           `protobuf:"varint,5,opt,name=miss,proto3" json:"miss,omitempty"`
	Tips                 string          `protobuf:"bytes,6,opt,name=tips,proto3" json:"tips,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *CardWithOrig_Item) Reset()         { *m = CardWithOrig_Item{} }
func (m *CardWithOrig_Item) String() string { return proto.CompactTextString(m) }
func (*CardWithOrig_Item) ProtoMessage()    {}
func (*CardWithOrig_Item) Descriptor() ([]byte, []int) {
	return fileDescriptor_f9172f04ee093ab4, []int{12, 0}
}
func (m *CardWithOrig_Item) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CardWithOrig_Item) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CardWithOrig_Item.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CardWithOrig_Item) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CardWithOrig_Item.Merge(m, src)
}
func (m *CardWithOrig_Item) XXX_Size() int {
	return m.Size()
}
func (m *CardWithOrig_Item) XXX_DiscardUnknown() {
	xxx_messageInfo_CardWithOrig_Item.DiscardUnknown(m)
}

var xxx_messageInfo_CardWithOrig_Item proto.InternalMessageInfo

func (m *CardWithOrig_Item) GetContent() string {
	if m != nil {
		return m.Content
	}
	return ""
}

func (m *CardWithOrig_Item) GetTimestamp() int64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func (m *CardWithOrig_Item) GetOrigType() DynamicDescType {
	if m != nil {
		return m.OrigType
	}
	return DynamicDescType_Unknown
}

func (m *CardWithOrig_Item) GetReply() int64 {
	if m != nil {
		return m.Reply
	}
	return 0
}

func (m *CardWithOrig_Item) GetMiss() int64 {
	if m != nil {
		return m.Miss
	}
	return 0
}

func (m *CardWithOrig_Item) GetTips() string {
	if m != nil {
		return m.Tips
	}
	return ""
}

type CardWithOrig_OriginUser struct {
	Info                 *CardWithOrig_OriginUser_Info `protobuf:"bytes,1,opt,name=info,proto3" json:"info,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                      `json:"-"`
	XXX_unrecognized     []byte                        `json:"-"`
	XXX_sizecache        int32                         `json:"-"`
}

func (m *CardWithOrig_OriginUser) Reset()         { *m = CardWithOrig_OriginUser{} }
func (m *CardWithOrig_OriginUser) String() string { return proto.CompactTextString(m) }
func (*CardWithOrig_OriginUser) ProtoMessage()    {}
func (*CardWithOrig_OriginUser) Descriptor() ([]byte, []int) {
	return fileDescriptor_f9172f04ee093ab4, []int{12, 1}
}
func (m *CardWithOrig_OriginUser) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CardWithOrig_OriginUser) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CardWithOrig_OriginUser.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CardWithOrig_OriginUser) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CardWithOrig_OriginUser.Merge(m, src)
}
func (m *CardWithOrig_OriginUser) XXX_Size() int {
	return m.Size()
}
func (m *CardWithOrig_OriginUser) XXX_DiscardUnknown() {
	xxx_messageInfo_CardWithOrig_OriginUser.DiscardUnknown(m)
}

var xxx_messageInfo_CardWithOrig_OriginUser proto.InternalMessageInfo

func (m *CardWithOrig_OriginUser) GetInfo() *CardWithOrig_OriginUser_Info {
	if m != nil {
		return m.Info
	}
	return nil
}

type CardWithOrig_OriginUser_Info struct {
	Uid                  int64    `protobuf:"varint,1,opt,name=uid,proto3" json:"uid,omitempty"`
	Uname                string   `protobuf:"bytes,2,opt,name=uname,proto3" json:"uname,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CardWithOrig_OriginUser_Info) Reset()         { *m = CardWithOrig_OriginUser_Info{} }
func (m *CardWithOrig_OriginUser_Info) String() string { return proto.CompactTextString(m) }
func (*CardWithOrig_OriginUser_Info) ProtoMessage()    {}
func (*CardWithOrig_OriginUser_Info) Descriptor() ([]byte, []int) {
	return fileDescriptor_f9172f04ee093ab4, []int{12, 1, 0}
}
func (m *CardWithOrig_OriginUser_Info) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CardWithOrig_OriginUser_Info) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CardWithOrig_OriginUser_Info.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CardWithOrig_OriginUser_Info) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CardWithOrig_OriginUser_Info.Merge(m, src)
}
func (m *CardWithOrig_OriginUser_Info) XXX_Size() int {
	return m.Size()
}
func (m *CardWithOrig_OriginUser_Info) XXX_DiscardUnknown() {
	xxx_messageInfo_CardWithOrig_OriginUser_Info.DiscardUnknown(m)
}

var xxx_messageInfo_CardWithOrig_OriginUser_Info proto.InternalMessageInfo

func (m *CardWithOrig_OriginUser_Info) GetUid() int64 {
	if m != nil {
		return m.Uid
	}
	return 0
}

func (m *CardWithOrig_OriginUser_Info) GetUname() string {
	if m != nil {
		return m.Uname
	}
	return ""
}

type CardWithVideo struct {
	Desc                 string   `protobuf:"bytes,1,opt,name=desc,proto3" json:"desc,omitempty"`
	Duration             int32    `protobuf:"varint,2,opt,name=duration,proto3" json:"duration,omitempty"`
	Dynamic              string   `protobuf:"bytes,3,opt,name=dynamic,proto3" json:"dynamic,omitempty"`
	Pubdate              int64    `protobuf:"varint,4,opt,name=pubdate,proto3" json:"pubdate,omitempty"`
	Title                string   `protobuf:"bytes,5,opt,name=title,proto3" json:"title,omitempty"`
	Tname                string   `protobuf:"bytes,6,opt,name=tname,proto3" json:"tname,omitempty"`
	Videos               int32    `protobuf:"varint,7,opt,name=videos,proto3" json:"videos,omitempty"`
	Pic                  string   `protobuf:"bytes,8,opt,name=pic,proto3" json:"pic,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CardWithVideo) Reset()         { *m = CardWithVideo{} }
func (m *CardWithVideo) String() string { return proto.CompactTextString(m) }
func (*CardWithVideo) ProtoMessage()    {}
func (*CardWithVideo) Descriptor() ([]byte, []int) {
	return fileDescriptor_f9172f04ee093ab4, []int{13}
}
func (m *CardWithVideo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CardWithVideo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CardWithVideo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CardWithVideo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CardWithVideo.Merge(m, src)
}
func (m *CardWithVideo) XXX_Size() int {
	return m.Size()
}
func (m *CardWithVideo) XXX_DiscardUnknown() {
	xxx_messageInfo_CardWithVideo.DiscardUnknown(m)
}

var xxx_messageInfo_CardWithVideo proto.InternalMessageInfo

func (m *CardWithVideo) GetDesc() string {
	if m != nil {
		return m.Desc
	}
	return ""
}

func (m *CardWithVideo) GetDuration() int32 {
	if m != nil {
		return m.Duration
	}
	return 0
}

func (m *CardWithVideo) GetDynamic() string {
	if m != nil {
		return m.Dynamic
	}
	return ""
}

func (m *CardWithVideo) GetPubdate() int64 {
	if m != nil {
		return m.Pubdate
	}
	return 0
}

func (m *CardWithVideo) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *CardWithVideo) GetTname() string {
	if m != nil {
		return m.Tname
	}
	return ""
}

func (m *CardWithVideo) GetVideos() int32 {
	if m != nil {
		return m.Videos
	}
	return 0
}

func (m *CardWithVideo) GetPic() string {
	if m != nil {
		return m.Pic
	}
	return ""
}

type CardTextOnly struct {
	Item                 *CardTextOnly_Item `protobuf:"bytes,1,opt,name=item,proto3" json:"item,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *CardTextOnly) Reset()         { *m = CardTextOnly{} }
func (m *CardTextOnly) String() string { return proto.CompactTextString(m) }
func (*CardTextOnly) ProtoMessage()    {}
func (*CardTextOnly) Descriptor() ([]byte, []int) {
	return fileDescriptor_f9172f04ee093ab4, []int{14}
}
func (m *CardTextOnly) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CardTextOnly) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CardTextOnly.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CardTextOnly) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CardTextOnly.Merge(m, src)
}
func (m *CardTextOnly) XXX_Size() int {
	return m.Size()
}
func (m *CardTextOnly) XXX_DiscardUnknown() {
	xxx_messageInfo_CardTextOnly.DiscardUnknown(m)
}

var xxx_messageInfo_CardTextOnly proto.InternalMessageInfo

func (m *CardTextOnly) GetItem() *CardTextOnly_Item {
	if m != nil {
		return m.Item
	}
	return nil
}

type CardTextOnly_Item struct {
	RpId                 int64    `protobuf:"varint,1,opt,name=rp_id,json=rpId,proto3" json:"rp_id,omitempty"`
	Uid                  int64    `protobuf:"varint,2,opt,name=uid,proto3" json:"uid,omitempty"`
	Content              string   `protobuf:"bytes,3,opt,name=content,proto3" json:"content,omitempty"`
	Ctrl                 string   `protobuf:"bytes,4,opt,name=ctrl,proto3" json:"ctrl,omitempty"`
	Timestamp            int64    `protobuf:"varint,7,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Reply                int32    `protobuf:"varint,8,opt,name=reply,proto3" json:"reply,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CardTextOnly_Item) Reset()         { *m = CardTextOnly_Item{} }
func (m *CardTextOnly_Item) String() string { return proto.CompactTextString(m) }
func (*CardTextOnly_Item) ProtoMessage()    {}
func (*CardTextOnly_Item) Descriptor() ([]byte, []int) {
	return fileDescriptor_f9172f04ee093ab4, []int{14, 0}
}
func (m *CardTextOnly_Item) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CardTextOnly_Item) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CardTextOnly_Item.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CardTextOnly_Item) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CardTextOnly_Item.Merge(m, src)
}
func (m *CardTextOnly_Item) XXX_Size() int {
	return m.Size()
}
func (m *CardTextOnly_Item) XXX_DiscardUnknown() {
	xxx_messageInfo_CardTextOnly_Item.DiscardUnknown(m)
}

var xxx_messageInfo_CardTextOnly_Item proto.InternalMessageInfo

func (m *CardTextOnly_Item) GetRpId() int64 {
	if m != nil {
		return m.RpId
	}
	return 0
}

func (m *CardTextOnly_Item) GetUid() int64 {
	if m != nil {
		return m.Uid
	}
	return 0
}

func (m *CardTextOnly_Item) GetContent() string {
	if m != nil {
		return m.Content
	}
	return ""
}

func (m *CardTextOnly_Item) GetCtrl() string {
	if m != nil {
		return m.Ctrl
	}
	return ""
}

func (m *CardTextOnly_Item) GetTimestamp() int64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func (m *CardTextOnly_Item) GetReply() int32 {
	if m != nil {
		return m.Reply
	}
	return 0
}

type CardWithPost struct {
	Title                string   `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	Summary              string   `protobuf:"bytes,2,opt,name=summary,proto3" json:"summary,omitempty"`
	ImageUrls            []string `protobuf:"bytes,3,rep,name=image_urls,json=imageUrls,proto3" json:"image_urls,omitempty"`
	BannerUrl            string   `protobuf:"bytes,4,opt,name=banner_url,json=bannerUrl,proto3" json:"banner_url,omitempty"`
	PublishTime          int64    `protobuf:"varint,5,opt,name=publish_time,json=publishTime,proto3" json:"publish_time,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CardWithPost) Reset()         { *m = CardWithPost{} }
func (m *CardWithPost) String() string { return proto.CompactTextString(m) }
func (*CardWithPost) ProtoMessage()    {}
func (*CardWithPost) Descriptor() ([]byte, []int) {
	return fileDescriptor_f9172f04ee093ab4, []int{15}
}
func (m *CardWithPost) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CardWithPost) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CardWithPost.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CardWithPost) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CardWithPost.Merge(m, src)
}
func (m *CardWithPost) XXX_Size() int {
	return m.Size()
}
func (m *CardWithPost) XXX_DiscardUnknown() {
	xxx_messageInfo_CardWithPost.DiscardUnknown(m)
}

var xxx_messageInfo_CardWithPost proto.InternalMessageInfo

func (m *CardWithPost) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *CardWithPost) GetSummary() string {
	if m != nil {
		return m.Summary
	}
	return ""
}

func (m *CardWithPost) GetImageUrls() []string {
	if m != nil {
		return m.ImageUrls
	}
	return nil
}

func (m *CardWithPost) GetBannerUrl() string {
	if m != nil {
		return m.BannerUrl
	}
	return ""
}

func (m *CardWithPost) GetPublishTime() int64 {
	if m != nil {
		return m.PublishTime
	}
	return 0
}

// TODO
type CardWithMusic struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CardWithMusic) Reset()         { *m = CardWithMusic{} }
func (m *CardWithMusic) String() string { return proto.CompactTextString(m) }
func (*CardWithMusic) ProtoMessage()    {}
func (*CardWithMusic) Descriptor() ([]byte, []int) {
	return fileDescriptor_f9172f04ee093ab4, []int{16}
}
func (m *CardWithMusic) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CardWithMusic) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CardWithMusic.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CardWithMusic) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CardWithMusic.Merge(m, src)
}
func (m *CardWithMusic) XXX_Size() int {
	return m.Size()
}
func (m *CardWithMusic) XXX_DiscardUnknown() {
	xxx_messageInfo_CardWithMusic.DiscardUnknown(m)
}

var xxx_messageInfo_CardWithMusic proto.InternalMessageInfo

type CardWithAnime struct {
	ApiSeasonInfo *CardWithAnime_ApiSeasonInfo `protobuf:"bytes,1,opt,name=apiSeasonInfo,proto3" json:"apiSeasonInfo,omitempty"`
	BulletCount   int64                        `protobuf:"varint,2,opt,name=bullet_count,json=bulletCount,proto3" json:"bullet_count,omitempty"`
	Cover         string                       `protobuf:"bytes,3,opt,name=cover,proto3" json:"cover,omitempty"`
	EpisodeId     int64                        `protobuf:"varint,4,opt,name=episode_id,json=episodeId,proto3" json:"episode_id,omitempty"`
	Index         string                       `protobuf:"bytes,5,opt,name=index,proto3" json:"index,omitempty"`
	IndexTitle    string                       `protobuf:"bytes,6,opt,name=index_title,json=indexTitle,proto3" json:"index_title,omitempty"`
	NewDesc       string                       `protobuf:"bytes,7,opt,name=new_desc,json=newDesc,proto3" json:"new_desc,omitempty"`
	//    int64 online_finish = 8;
	PlayCount            int64    `protobuf:"varint,9,opt,name=play_count,json=playCount,proto3" json:"play_count,omitempty"`
	ReplyCount           int64    `protobuf:"varint,10,opt,name=reply_count,json=replyCount,proto3" json:"reply_count,omitempty"`
	Url                  string   `protobuf:"bytes,11,opt,name=url,proto3" json:"url,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CardWithAnime) Reset()         { *m = CardWithAnime{} }
func (m *CardWithAnime) String() string { return proto.CompactTextString(m) }
func (*CardWithAnime) ProtoMessage()    {}
func (*CardWithAnime) Descriptor() ([]byte, []int) {
	return fileDescriptor_f9172f04ee093ab4, []int{17}
}
func (m *CardWithAnime) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CardWithAnime) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CardWithAnime.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CardWithAnime) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CardWithAnime.Merge(m, src)
}
func (m *CardWithAnime) XXX_Size() int {
	return m.Size()
}
func (m *CardWithAnime) XXX_DiscardUnknown() {
	xxx_messageInfo_CardWithAnime.DiscardUnknown(m)
}

var xxx_messageInfo_CardWithAnime proto.InternalMessageInfo

func (m *CardWithAnime) GetApiSeasonInfo() *CardWithAnime_ApiSeasonInfo {
	if m != nil {
		return m.ApiSeasonInfo
	}
	return nil
}

func (m *CardWithAnime) GetBulletCount() int64 {
	if m != nil {
		return m.BulletCount
	}
	return 0
}

func (m *CardWithAnime) GetCover() string {
	if m != nil {
		return m.Cover
	}
	return ""
}

func (m *CardWithAnime) GetEpisodeId() int64 {
	if m != nil {
		return m.EpisodeId
	}
	return 0
}

func (m *CardWithAnime) GetIndex() string {
	if m != nil {
		return m.Index
	}
	return ""
}

func (m *CardWithAnime) GetIndexTitle() string {
	if m != nil {
		return m.IndexTitle
	}
	return ""
}

func (m *CardWithAnime) GetNewDesc() string {
	if m != nil {
		return m.NewDesc
	}
	return ""
}

func (m *CardWithAnime) GetPlayCount() int64 {
	if m != nil {
		return m.PlayCount
	}
	return 0
}

func (m *CardWithAnime) GetReplyCount() int64 {
	if m != nil {
		return m.ReplyCount
	}
	return 0
}

func (m *CardWithAnime) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

type CardWithAnime_ApiSeasonInfo struct {
	BgmType              int64    `protobuf:"varint,1,opt,name=bgm_type,json=bgmType,proto3" json:"bgm_type,omitempty"`
	Cover                string   `protobuf:"bytes,2,opt,name=cover,proto3" json:"cover,omitempty"`
	IsFinish             int64    `protobuf:"varint,3,opt,name=is_finish,json=isFinish,proto3" json:"is_finish,omitempty"`
	SeasonId             int64    `protobuf:"varint,4,opt,name=season_id,json=seasonId,proto3" json:"season_id,omitempty"`
	Title                string   `protobuf:"bytes,5,opt,name=title,proto3" json:"title,omitempty"`
	TotalCount           int64    `protobuf:"varint,6,opt,name=total_count,json=totalCount,proto3" json:"total_count,omitempty"`
	Ts                   int64    `protobuf:"varint,7,opt,name=ts,proto3" json:"ts,omitempty"`
	TypeName             string   `protobuf:"bytes,8,opt,name=type_name,json=typeName,proto3" json:"type_name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CardWithAnime_ApiSeasonInfo) Reset()         { *m = CardWithAnime_ApiSeasonInfo{} }
func (m *CardWithAnime_ApiSeasonInfo) String() string { return proto.CompactTextString(m) }
func (*CardWithAnime_ApiSeasonInfo) ProtoMessage()    {}
func (*CardWithAnime_ApiSeasonInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_f9172f04ee093ab4, []int{17, 0}
}
func (m *CardWithAnime_ApiSeasonInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CardWithAnime_ApiSeasonInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CardWithAnime_ApiSeasonInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CardWithAnime_ApiSeasonInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CardWithAnime_ApiSeasonInfo.Merge(m, src)
}
func (m *CardWithAnime_ApiSeasonInfo) XXX_Size() int {
	return m.Size()
}
func (m *CardWithAnime_ApiSeasonInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_CardWithAnime_ApiSeasonInfo.DiscardUnknown(m)
}

var xxx_messageInfo_CardWithAnime_ApiSeasonInfo proto.InternalMessageInfo

func (m *CardWithAnime_ApiSeasonInfo) GetBgmType() int64 {
	if m != nil {
		return m.BgmType
	}
	return 0
}

func (m *CardWithAnime_ApiSeasonInfo) GetCover() string {
	if m != nil {
		return m.Cover
	}
	return ""
}

func (m *CardWithAnime_ApiSeasonInfo) GetIsFinish() int64 {
	if m != nil {
		return m.IsFinish
	}
	return 0
}

func (m *CardWithAnime_ApiSeasonInfo) GetSeasonId() int64 {
	if m != nil {
		return m.SeasonId
	}
	return 0
}

func (m *CardWithAnime_ApiSeasonInfo) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *CardWithAnime_ApiSeasonInfo) GetTotalCount() int64 {
	if m != nil {
		return m.TotalCount
	}
	return 0
}

func (m *CardWithAnime_ApiSeasonInfo) GetTs() int64 {
	if m != nil {
		return m.Ts
	}
	return 0
}

func (m *CardWithAnime_ApiSeasonInfo) GetTypeName() string {
	if m != nil {
		return m.TypeName
	}
	return ""
}

type CardWithSketch struct {
	Vest                 *CardWithSketch_Vest   `protobuf:"bytes,1,opt,name=vest,proto3" json:"vest,omitempty"`
	Sketch               *CardWithSketch_Sketch `protobuf:"bytes,2,opt,name=sketch,proto3" json:"sketch,omitempty"`
	XXX_NoUnkeyedLiteral struct{}               `json:"-"`
	XXX_unrecognized     []byte                 `json:"-"`
	XXX_sizecache        int32                  `json:"-"`
}

func (m *CardWithSketch) Reset()         { *m = CardWithSketch{} }
func (m *CardWithSketch) String() string { return proto.CompactTextString(m) }
func (*CardWithSketch) ProtoMessage()    {}
func (*CardWithSketch) Descriptor() ([]byte, []int) {
	return fileDescriptor_f9172f04ee093ab4, []int{18}
}
func (m *CardWithSketch) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CardWithSketch) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CardWithSketch.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CardWithSketch) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CardWithSketch.Merge(m, src)
}
func (m *CardWithSketch) XXX_Size() int {
	return m.Size()
}
func (m *CardWithSketch) XXX_DiscardUnknown() {
	xxx_messageInfo_CardWithSketch.DiscardUnknown(m)
}

var xxx_messageInfo_CardWithSketch proto.InternalMessageInfo

func (m *CardWithSketch) GetVest() *CardWithSketch_Vest {
	if m != nil {
		return m.Vest
	}
	return nil
}

func (m *CardWithSketch) GetSketch() *CardWithSketch_Sketch {
	if m != nil {
		return m.Sketch
	}
	return nil
}

type CardWithSketch_Vest struct {
	Uid                  int64    `protobuf:"varint,1,opt,name=uid,proto3" json:"uid,omitempty"`
	Content              string   `protobuf:"bytes,2,opt,name=content,proto3" json:"content,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CardWithSketch_Vest) Reset()         { *m = CardWithSketch_Vest{} }
func (m *CardWithSketch_Vest) String() string { return proto.CompactTextString(m) }
func (*CardWithSketch_Vest) ProtoMessage()    {}
func (*CardWithSketch_Vest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f9172f04ee093ab4, []int{18, 0}
}
func (m *CardWithSketch_Vest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CardWithSketch_Vest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CardWithSketch_Vest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CardWithSketch_Vest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CardWithSketch_Vest.Merge(m, src)
}
func (m *CardWithSketch_Vest) XXX_Size() int {
	return m.Size()
}
func (m *CardWithSketch_Vest) XXX_DiscardUnknown() {
	xxx_messageInfo_CardWithSketch_Vest.DiscardUnknown(m)
}

var xxx_messageInfo_CardWithSketch_Vest proto.InternalMessageInfo

func (m *CardWithSketch_Vest) GetUid() int64 {
	if m != nil {
		return m.Uid
	}
	return 0
}

func (m *CardWithSketch_Vest) GetContent() string {
	if m != nil {
		return m.Content
	}
	return ""
}

type CardWithSketch_Sketch struct {
	Title                string   `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	DescText             string   `protobuf:"bytes,2,opt,name=desc_text,json=descText,proto3" json:"desc_text,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CardWithSketch_Sketch) Reset()         { *m = CardWithSketch_Sketch{} }
func (m *CardWithSketch_Sketch) String() string { return proto.CompactTextString(m) }
func (*CardWithSketch_Sketch) ProtoMessage()    {}
func (*CardWithSketch_Sketch) Descriptor() ([]byte, []int) {
	return fileDescriptor_f9172f04ee093ab4, []int{18, 1}
}
func (m *CardWithSketch_Sketch) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CardWithSketch_Sketch) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CardWithSketch_Sketch.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CardWithSketch_Sketch) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CardWithSketch_Sketch.Merge(m, src)
}
func (m *CardWithSketch_Sketch) XXX_Size() int {
	return m.Size()
}
func (m *CardWithSketch_Sketch) XXX_DiscardUnknown() {
	xxx_messageInfo_CardWithSketch_Sketch.DiscardUnknown(m)
}

var xxx_messageInfo_CardWithSketch_Sketch proto.InternalMessageInfo

func (m *CardWithSketch_Sketch) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *CardWithSketch_Sketch) GetDescText() string {
	if m != nil {
		return m.DescText
	}
	return ""
}

type CardWithLive struct {
	Roomid               int64      `protobuf:"varint,1,opt,name=roomid,proto3" json:"roomid,omitempty"`
	Uid                  int64      `protobuf:"varint,2,opt,name=uid,proto3" json:"uid,omitempty"`
	Uname                string     `protobuf:"bytes,3,opt,name=uname,proto3" json:"uname,omitempty"`
	Cover                string     `protobuf:"bytes,4,opt,name=cover,proto3" json:"cover,omitempty"`
	Title                string     `protobuf:"bytes,5,opt,name=title,proto3" json:"title,omitempty"`
	AreaV2Name           string     `protobuf:"bytes,6,opt,name=area_v2_name,json=areaV2Name,proto3" json:"area_v2_name,omitempty"`
	LiveStatus           LiveStatus `protobuf:"varint,7,opt,name=live_status,json=liveStatus,proto3,enum=bilibili.LiveStatus" json:"live_status,omitempty"`
	RoundStatus          RoomStatus `protobuf:"varint,8,opt,name=round_status,json=roundStatus,proto3,enum=bilibili.RoomStatus" json:"round_status,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *CardWithLive) Reset()         { *m = CardWithLive{} }
func (m *CardWithLive) String() string { return proto.CompactTextString(m) }
func (*CardWithLive) ProtoMessage()    {}
func (*CardWithLive) Descriptor() ([]byte, []int) {
	return fileDescriptor_f9172f04ee093ab4, []int{19}
}
func (m *CardWithLive) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CardWithLive) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CardWithLive.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CardWithLive) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CardWithLive.Merge(m, src)
}
func (m *CardWithLive) XXX_Size() int {
	return m.Size()
}
func (m *CardWithLive) XXX_DiscardUnknown() {
	xxx_messageInfo_CardWithLive.DiscardUnknown(m)
}

var xxx_messageInfo_CardWithLive proto.InternalMessageInfo

func (m *CardWithLive) GetRoomid() int64 {
	if m != nil {
		return m.Roomid
	}
	return 0
}

func (m *CardWithLive) GetUid() int64 {
	if m != nil {
		return m.Uid
	}
	return 0
}

func (m *CardWithLive) GetUname() string {
	if m != nil {
		return m.Uname
	}
	return ""
}

func (m *CardWithLive) GetCover() string {
	if m != nil {
		return m.Cover
	}
	return ""
}

func (m *CardWithLive) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *CardWithLive) GetAreaV2Name() string {
	if m != nil {
		return m.AreaV2Name
	}
	return ""
}

func (m *CardWithLive) GetLiveStatus() LiveStatus {
	if m != nil {
		return m.LiveStatus
	}
	return LiveStatus_NoLiving
}

func (m *CardWithLive) GetRoundStatus() RoomStatus {
	if m != nil {
		return m.RoundStatus
	}
	return RoomStatus_NonExist
}

// 可能是新版直播间
type CardWithLiveV2 struct {
	LivePlayInfo         *CardWithLiveV2_LivePlayInfo `protobuf:"bytes,1,opt,name=live_play_info,json=livePlayInfo,proto3" json:"live_play_info,omitempty"`
	Style                int64                        `protobuf:"varint,2,opt,name=style,proto3" json:"style,omitempty"`
	Type                 int64                        `protobuf:"varint,3,opt,name=type,proto3" json:"type,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                     `json:"-"`
	XXX_unrecognized     []byte                       `json:"-"`
	XXX_sizecache        int32                        `json:"-"`
}

func (m *CardWithLiveV2) Reset()         { *m = CardWithLiveV2{} }
func (m *CardWithLiveV2) String() string { return proto.CompactTextString(m) }
func (*CardWithLiveV2) ProtoMessage()    {}
func (*CardWithLiveV2) Descriptor() ([]byte, []int) {
	return fileDescriptor_f9172f04ee093ab4, []int{20}
}
func (m *CardWithLiveV2) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CardWithLiveV2) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CardWithLiveV2.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CardWithLiveV2) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CardWithLiveV2.Merge(m, src)
}
func (m *CardWithLiveV2) XXX_Size() int {
	return m.Size()
}
func (m *CardWithLiveV2) XXX_DiscardUnknown() {
	xxx_messageInfo_CardWithLiveV2.DiscardUnknown(m)
}

var xxx_messageInfo_CardWithLiveV2 proto.InternalMessageInfo

func (m *CardWithLiveV2) GetLivePlayInfo() *CardWithLiveV2_LivePlayInfo {
	if m != nil {
		return m.LivePlayInfo
	}
	return nil
}

func (m *CardWithLiveV2) GetStyle() int64 {
	if m != nil {
		return m.Style
	}
	return 0
}

func (m *CardWithLiveV2) GetType() int64 {
	if m != nil {
		return m.Type
	}
	return 0
}

type CardWithLiveV2_LivePlayInfo struct {
	Cover                string     `protobuf:"bytes,1,opt,name=cover,proto3" json:"cover,omitempty"`
	Title                string     `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	RoomId               int64      `protobuf:"varint,3,opt,name=room_id,json=roomId,proto3" json:"room_id,omitempty"`
	LiveStatus           LiveStatus `protobuf:"varint,4,opt,name=live_status,json=liveStatus,proto3,enum=bilibili.LiveStatus" json:"live_status,omitempty"`
	Link                 string     `protobuf:"bytes,5,opt,name=link,proto3" json:"link,omitempty"`
	Uid                  int64      `protobuf:"varint,6,opt,name=uid,proto3" json:"uid,omitempty"`
	LiveId               int64      `protobuf:"varint,7,opt,name=live_id,json=liveId,proto3" json:"live_id,omitempty"`
	AreaId               int64      `protobuf:"varint,8,opt,name=area_id,json=areaId,proto3" json:"area_id,omitempty"`
	AreaName             string     `protobuf:"bytes,9,opt,name=area_name,json=areaName,proto3" json:"area_name,omitempty"`
	ParentAreaId         int64      `protobuf:"varint,10,opt,name=parent_area_id,json=parentAreaId,proto3" json:"parent_area_id,omitempty"`
	ParentAreaName       string     `protobuf:"bytes,11,opt,name=parent_area_name,json=parentAreaName,proto3" json:"parent_area_name,omitempty"`
	RoomType             int64      `protobuf:"varint,12,opt,name=room_type,json=roomType,proto3" json:"room_type,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *CardWithLiveV2_LivePlayInfo) Reset()         { *m = CardWithLiveV2_LivePlayInfo{} }
func (m *CardWithLiveV2_LivePlayInfo) String() string { return proto.CompactTextString(m) }
func (*CardWithLiveV2_LivePlayInfo) ProtoMessage()    {}
func (*CardWithLiveV2_LivePlayInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_f9172f04ee093ab4, []int{20, 0}
}
func (m *CardWithLiveV2_LivePlayInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CardWithLiveV2_LivePlayInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CardWithLiveV2_LivePlayInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CardWithLiveV2_LivePlayInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CardWithLiveV2_LivePlayInfo.Merge(m, src)
}
func (m *CardWithLiveV2_LivePlayInfo) XXX_Size() int {
	return m.Size()
}
func (m *CardWithLiveV2_LivePlayInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_CardWithLiveV2_LivePlayInfo.DiscardUnknown(m)
}

var xxx_messageInfo_CardWithLiveV2_LivePlayInfo proto.InternalMessageInfo

func (m *CardWithLiveV2_LivePlayInfo) GetCover() string {
	if m != nil {
		return m.Cover
	}
	return ""
}

func (m *CardWithLiveV2_LivePlayInfo) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *CardWithLiveV2_LivePlayInfo) GetRoomId() int64 {
	if m != nil {
		return m.RoomId
	}
	return 0
}

func (m *CardWithLiveV2_LivePlayInfo) GetLiveStatus() LiveStatus {
	if m != nil {
		return m.LiveStatus
	}
	return LiveStatus_NoLiving
}

func (m *CardWithLiveV2_LivePlayInfo) GetLink() string {
	if m != nil {
		return m.Link
	}
	return ""
}

func (m *CardWithLiveV2_LivePlayInfo) GetUid() int64 {
	if m != nil {
		return m.Uid
	}
	return 0
}

func (m *CardWithLiveV2_LivePlayInfo) GetLiveId() int64 {
	if m != nil {
		return m.LiveId
	}
	return 0
}

func (m *CardWithLiveV2_LivePlayInfo) GetAreaId() int64 {
	if m != nil {
		return m.AreaId
	}
	return 0
}

func (m *CardWithLiveV2_LivePlayInfo) GetAreaName() string {
	if m != nil {
		return m.AreaName
	}
	return ""
}

func (m *CardWithLiveV2_LivePlayInfo) GetParentAreaId() int64 {
	if m != nil {
		return m.ParentAreaId
	}
	return 0
}

func (m *CardWithLiveV2_LivePlayInfo) GetParentAreaName() string {
	if m != nil {
		return m.ParentAreaName
	}
	return ""
}

func (m *CardWithLiveV2_LivePlayInfo) GetRoomType() int64 {
	if m != nil {
		return m.RoomType
	}
	return 0
}

func init() {
	proto.RegisterEnum("bilibili.LiveStatus", LiveStatus_name, LiveStatus_value)
	proto.RegisterEnum("bilibili.RoundStatus", RoundStatus_name, RoundStatus_value)
	proto.RegisterEnum("bilibili.RoomStatus", RoomStatus_name, RoomStatus_value)
	proto.RegisterEnum("bilibili.SpecialType", SpecialType_name, SpecialType_value)
	proto.RegisterEnum("bilibili.DynamicDescType", DynamicDescType_name, DynamicDescType_value)
	proto.RegisterType((*Sliver2CoinsStatusResponse)(nil), "bilibili.Sliver2CoinsStatusResponse")
	proto.RegisterType((*Sliver2CoinsStatusResponse_Data)(nil), "bilibili.Sliver2CoinsStatusResponse.Data")
	proto.RegisterType((*BaseResponse)(nil), "bilibili.BaseResponse")
	proto.RegisterType((*RoomInitResponse)(nil), "bilibili.RoomInitResponse")
	proto.RegisterType((*RoomInitResponse_Data)(nil), "bilibili.RoomInitResponse.Data")
	proto.RegisterType((*XSpaceAccInfoResponse)(nil), "bilibili.XSpaceAccInfoResponse")
	proto.RegisterType((*XSpaceAccInfoResponse_Data)(nil), "bilibili.XSpaceAccInfoResponse.Data")
	proto.RegisterType((*XSpaceAccInfoResponse_Data_LiveRoom)(nil), "bilibili.XSpaceAccInfoResponse.Data.LiveRoom")
	proto.RegisterType((*GetRoomInfoOldResponse)(nil), "bilibili.GetRoomInfoOldResponse")
	proto.RegisterType((*GetRoomInfoOldResponse_Data)(nil), "bilibili.GetRoomInfoOldResponse.Data")
	proto.RegisterType((*FeedListResponse)(nil), "bilibili.FeedListResponse")
	proto.RegisterType((*FeedListResponse_Data)(nil), "bilibili.FeedListResponse.Data")
	proto.RegisterType((*FeedListResponse_Data_ListInfo)(nil), "bilibili.FeedListResponse.Data.ListInfo")
	proto.RegisterType((*Card)(nil), "bilibili.Card")
	proto.RegisterType((*Card_Desc)(nil), "bilibili.Card.Desc")
	proto.RegisterType((*Card_Desc_UserProfile)(nil), "bilibili.Card.Desc.UserProfile")
	proto.RegisterType((*Card_Desc_UserProfile_Info)(nil), "bilibili.Card.Desc.UserProfile.Info")
	proto.RegisterType((*Card_Extra)(nil), "bilibili.Card.Extra")
	proto.RegisterType((*Card_Display)(nil), "bilibili.Card.Display")
	proto.RegisterType((*Card_Display_EmojiInfo)(nil), "bilibili.Card.Display.EmojiInfo")
	proto.RegisterType((*Card_Display_EmojiInfo_EmojiDetail)(nil), "bilibili.Card.Display.EmojiInfo.EmojiDetail")
	proto.RegisterType((*Card_Display_Origin)(nil), "bilibili.Card.Display.Origin")
	proto.RegisterType((*DynamicSvrSpaceHistoryResponse)(nil), "bilibili.DynamicSvrSpaceHistoryResponse")
	proto.RegisterType((*DynamicSvrSpaceHistoryResponse_Data)(nil), "bilibili.DynamicSvrSpaceHistoryResponse.Data")
	proto.RegisterType((*DynamicSvrDynamicNewResponse)(nil), "bilibili.DynamicSvrDynamicNewResponse")
	proto.RegisterType((*DynamicSvrDynamicNewResponse_Data)(nil), "bilibili.DynamicSvrDynamicNewResponse.Data")
	proto.RegisterType((*RelationModifyResponse)(nil), "bilibili.RelationModifyResponse")
	proto.RegisterType((*GetAttentionListResponse)(nil), "bilibili.GetAttentionListResponse")
	proto.RegisterType((*GetAttentionListResponse_Data)(nil), "bilibili.GetAttentionListResponse.Data")
	proto.RegisterType((*CardWithImage)(nil), "bilibili.CardWithImage")
	proto.RegisterType((*CardWithImage_Item)(nil), "bilibili.CardWithImage.Item")
	proto.RegisterType((*CardWithImage_Item_Picture)(nil), "bilibili.CardWithImage.Item.Picture")
	proto.RegisterType((*CardWithOrig)(nil), "bilibili.CardWithOrig")
	proto.RegisterType((*CardWithOrig_Item)(nil), "bilibili.CardWithOrig.Item")
	proto.RegisterType((*CardWithOrig_OriginUser)(nil), "bilibili.CardWithOrig.OriginUser")
	proto.RegisterType((*CardWithOrig_OriginUser_Info)(nil), "bilibili.CardWithOrig.OriginUser.Info")
	proto.RegisterType((*CardWithVideo)(nil), "bilibili.CardWithVideo")
	proto.RegisterType((*CardTextOnly)(nil), "bilibili.CardTextOnly")
	proto.RegisterType((*CardTextOnly_Item)(nil), "bilibili.CardTextOnly.Item")
	proto.RegisterType((*CardWithPost)(nil), "bilibili.CardWithPost")
	proto.RegisterType((*CardWithMusic)(nil), "bilibili.CardWithMusic")
	proto.RegisterType((*CardWithAnime)(nil), "bilibili.CardWithAnime")
	proto.RegisterType((*CardWithAnime_ApiSeasonInfo)(nil), "bilibili.CardWithAnime.ApiSeasonInfo")
	proto.RegisterType((*CardWithSketch)(nil), "bilibili.CardWithSketch")
	proto.RegisterType((*CardWithSketch_Vest)(nil), "bilibili.CardWithSketch.Vest")
	proto.RegisterType((*CardWithSketch_Sketch)(nil), "bilibili.CardWithSketch.Sketch")
	proto.RegisterType((*CardWithLive)(nil), "bilibili.CardWithLive")
	proto.RegisterType((*CardWithLiveV2)(nil), "bilibili.CardWithLiveV2")
	proto.RegisterType((*CardWithLiveV2_LivePlayInfo)(nil), "bilibili.CardWithLiveV2.LivePlayInfo")
}

func init() { proto.RegisterFile("bili.proto", fileDescriptor_f9172f04ee093ab4) }

var fileDescriptor_f9172f04ee093ab4 = []byte{
	// 2899 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x59, 0x4d, 0x8c, 0x1c, 0x47,
	0xf5, 0x77, 0xcf, 0xc7, 0xce, 0xcc, 0x9b, 0xd9, 0x71, 0xff, 0x2b, 0x89, 0x33, 0x19, 0x3b, 0xeb,
	0xf5, 0xfc, 0xed, 0x64, 0x63, 0xc8, 0x10, 0x36, 0x09, 0x01, 0x02, 0x4a, 0xec, 0x38, 0x1f, 0x4b,
	0xfc, 0x45, 0xaf, 0xed, 0x04, 0x2e, 0xad, 0xde, 0xee, 0xda, 0xd9, 0xc2, 0xfd, 0xa5, 0xae, 0x9a,
	0xf5, 0x4e, 0x4e, 0xbe, 0x71, 0x89, 0xe0, 0x86, 0xb8, 0x21, 0xce, 0x1c, 0x81, 0x03, 0x57, 0x4e,
	0x41, 0x42, 0x02, 0x04, 0x9c, 0x90, 0x10, 0x32, 0x42, 0x02, 0x41, 0xc4, 0x09, 0x2e, 0xb9, 0xa0,
	0xf7, 0xaa, 0xfa, 0x6b, 0x3f, 0x6c, 0xcb, 0xc9, 0x61, 0xb5, 0xf5, 0x5e, 0x55, 0xd7, 0xc7, 0x7b,
	0xbf, 0xf7, 0xde, 0xaf, 0x6a, 0x00, 0xb6, 0x44, 0x28, 0xa6, 0x69, 0x96, 0xa8, 0x84, 0x75, 0xb1,
	0x8d, 0x7f, 0x93, 0xdf, 0x58, 0x30, 0xde, 0x0c, 0xc5, 0x2e, 0xcf, 0xd6, 0xdf, 0x48, 0x44, 0x2c,
	0x37, 0x95, 0xa7, 0xe6, 0xd2, 0xe1, 0x32, 0x4d, 0x62, 0xc9, 0x19, 0x83, 0x96, 0x9f, 0x04, 0x7c,
	0x64, 0xad, 0x5a, 0x6b, 0x6d, 0x87, 0xda, 0xcc, 0x86, 0x66, 0x24, 0x67, 0xa3, 0xc6, 0xaa, 0xb5,
	0xd6, 0x73, 0xb0, 0xc9, 0x46, 0xd0, 0x89, 0xb8, 0x94, 0xde, 0x8c, 0x8f, 0x9a, 0xa4, 0xcd, 0x45,
	0xf6, 0x75, 0x68, 0x05, 0x9e, 0xf2, 0x46, 0xad, 0x55, 0x6b, 0xad, 0xbf, 0xfe, 0xdc, 0x34, 0x5f,
	0x77, 0x7a, 0xf4, 0x9a, 0xd3, 0x4b, 0x9e, 0xf2, 0x1c, 0xfa, 0x6c, 0xbc, 0x0e, 0x2d, 0x94, 0xd8,
	0x09, 0x58, 0x92, 0x22, 0xdc, 0xe5, 0x19, 0x6d, 0xa4, 0xe9, 0x18, 0x49, 0x6f, 0x4f, 0xc4, 0xb4,
	0x17, 0xda, 0x9e, 0x88, 0x27, 0x57, 0x61, 0x70, 0xd1, 0x93, 0xfc, 0xb3, 0x3a, 0xc2, 0xe4, 0xe3,
	0x06, 0xd8, 0x4e, 0x92, 0x44, 0x1b, 0xb1, 0x50, 0xf7, 0x9d, 0xb4, 0x32, 0x45, 0xa3, 0x6e, 0x85,
	0x17, 0x8d, 0x15, 0x9a, 0x64, 0x85, 0xd3, 0xa5, 0x15, 0xf6, 0xcf, 0x5b, 0x3d, 0xfb, 0x7f, 0x2c,
	0x73, 0xf8, 0x27, 0xa1, 0x93, 0x25, 0x49, 0xe4, 0x8a, 0x20, 0x3f, 0x3d, 0x8a, 0x1b, 0x01, 0x7b,
	0x0a, 0xba, 0x72, 0x27, 0xc9, 0x14, 0xf6, 0x34, 0xa8, 0xa7, 0x43, 0xf2, 0x46, 0x80, 0x07, 0x9c,
	0x8b, 0x80, 0x16, 0x6c, 0x3a, 0xd8, 0x64, 0x27, 0xa1, 0x27, 0xa4, 0xbb, 0x23, 0x82, 0x80, 0xc7,
	0xa3, 0xf6, 0xaa, 0xb5, 0xd6, 0x75, 0xba, 0x42, 0xbe, 0x43, 0xb2, 0xe9, 0x0c, 0x13, 0xff, 0x36,
	0x0f, 0x46, 0x4b, 0x79, 0xe7, 0x65, 0x92, 0xd9, 0xcb, 0xd0, 0x47, 0x67, 0xb9, 0x92, 0xdc, 0x34,
	0xea, 0xae, 0x5a, 0x6b, 0xc3, 0xf5, 0xc7, 0xcb, 0x43, 0x5c, 0x16, 0xbb, 0xdc, 0xb8, 0x10, 0xc2,
	0xa2, 0xcd, 0x1e, 0x83, 0xb6, 0x90, 0xae, 0x4c, 0x47, 0xc7, 0xb5, 0x8d, 0x84, 0xdc, 0x4c, 0xd9,
	0x19, 0x18, 0xc8, 0x94, 0xfb, 0xc2, 0x0b, 0x5d, 0xb5, 0x48, 0xf9, 0xc8, 0xa6, 0xbe, 0xbe, 0xd1,
	0xdd, 0x58, 0xa4, 0x7c, 0xf2, 0xc7, 0x26, 0x3c, 0xf1, 0xfe, 0x66, 0xea, 0xf9, 0xfc, 0x82, 0xef,
	0x6f, 0xc4, 0xdb, 0xc9, 0x23, 0x1a, 0xfd, 0xcb, 0x35, 0xa3, 0x9f, 0x2d, 0xf7, 0x7b, 0xe8, 0xe4,
	0x55, 0xcb, 0xff, 0xbe, 0x61, 0x2c, 0x8f, 0x30, 0x29, 0xac, 0x8e, 0x4d, 0xdc, 0x42, 0xec, 0x45,
	0xf9, 0x5a, 0xd4, 0x66, 0x8f, 0x43, 0x3b, 0xe4, 0xbb, 0x3c, 0x1c, 0x75, 0x68, 0x5f, 0x5a, 0x60,
	0xdf, 0x80, 0x1e, 0x59, 0x0d, 0x7d, 0x35, 0xfa, 0x3f, 0xda, 0xc3, 0xf3, 0x0f, 0xb3, 0x07, 0x32,
	0x27, 0xe2, 0xc2, 0xe9, 0x86, 0xa6, 0x35, 0xfe, 0xa5, 0x05, 0xdd, 0x5c, 0xcd, 0x56, 0x00, 0x70,
	0x4e, 0x6d, 0x65, 0x63, 0x8b, 0x8a, 0x06, 0xfb, 0x4b, 0x2f, 0x98, 0xc8, 0xa8, 0xfa, 0x05, 0xa1,
	0x91, 0x85, 0x06, 0xe5, 0xd8, 0xc4, 0x03, 0x28, 0xa1, 0x42, 0x4e, 0x51, 0xda, 0x73, 0xb4, 0x80,
	0x5a, 0x3f, 0xc1, 0x90, 0x6b, 0x6b, 0x2d, 0x09, 0x18, 0x89, 0xb8, 0x96, 0xd0, 0x30, 0x31, 0x58,
	0x14, 0x01, 0x5b, 0x85, 0x7e, 0x96, 0xcc, 0xe3, 0xc0, 0x2c, 0xab, 0x4d, 0x51, 0x55, 0x4d, 0xfe,
	0xd1, 0x84, 0x13, 0x6f, 0x73, 0xa5, 0x21, 0xbf, 0x9d, 0x5c, 0x0b, 0x83, 0x47, 0x74, 0xec, 0x57,
	0x6a, 0x8e, 0x3d, 0x57, 0x1a, 0xf5, 0xf0, 0xd9, 0xab, 0x9e, 0xfd, 0x5b, 0xee, 0xd9, 0x97, 0x0e,
	0x18, 0xb1, 0x06, 0x69, 0xa7, 0xe8, 0xab, 0x99, 0xf6, 0x95, 0xfa, 0x21, 0x1b, 0xf4, 0xd9, 0x13,
	0xd5, 0xcf, 0x8a, 0xce, 0xda, 0xd9, 0x71, 0xb9, 0x8a, 0x4f, 0x9a, 0x0f, 0x19, 0x41, 0xc6, 0x53,
	0xad, 0x43, 0x3c, 0xd5, 0x3e, 0xd4, 0x53, 0x4b, 0xfb, 0x3c, 0x95, 0xc4, 0xa1, 0x88, 0x39, 0x39,
	0xa3, 0xe9, 0x18, 0xa9, 0xe2, 0xc1, 0x6e, 0xcd, 0x83, 0xe7, 0x60, 0xb8, 0x95, 0x25, 0x5e, 0xe0,
	0x7b, 0x52, 0xe9, 0xe0, 0xec, 0x91, 0x3b, 0x96, 0x0b, 0x2d, 0x86, 0x27, 0xfb, 0x7f, 0x58, 0xd6,
	0x13, 0xe5, 0xb9, 0x04, 0x68, 0xd4, 0x40, 0x2b, 0x75, 0x3e, 0x99, 0x7c, 0xaf, 0x05, 0xf6, 0x5b,
	0x9c, 0x07, 0x97, 0x85, 0xfc, 0xcc, 0x73, 0xe6, 0xfe, 0x79, 0xab, 0xfe, 0xfd, 0x41, 0xb3, 0x2c,
	0x18, 0x19, 0x97, 0xf3, 0x50, 0x99, 0xd5, 0x8c, 0x84, 0x7b, 0x48, 0xcb, 0xc5, 0xa8, 0xcd, 0xc6,
	0xd0, 0xc5, 0xff, 0x52, 0x7c, 0x90, 0xe7, 0xfe, 0x42, 0x66, 0x5f, 0x83, 0x56, 0x28, 0xa4, 0x1a,
	0xb5, 0x56, 0x9b, 0x6b, 0xfd, 0xf5, 0xb5, 0x07, 0xec, 0x62, 0x8a, 0x1a, 0x8a, 0x68, 0xfa, 0x6a,
	0xfc, 0xdd, 0x06, 0xc6, 0xad, 0x56, 0x95, 0x5e, 0xb2, 0xaa, 0x5e, 0x62, 0xd0, 0xda, 0xf6, 0xfc,
	0x62, 0x43, 0xd8, 0xc6, 0x91, 0x73, 0xca, 0x32, 0x7a, 0x37, 0x5a, 0x38, 0x22, 0x4a, 0x4b, 0x6f,
	0xb6, 0x6b, 0xde, 0xb4, 0xa1, 0x99, 0x0a, 0xdf, 0x20, 0x02, 0x9b, 0x47, 0xe2, 0x81, 0xe1, 0x11,
	0xe3, 0xdb, 0x84, 0x86, 0x9e, 0x43, 0xed, 0xbc, 0x7c, 0xf4, 0xca, 0xf2, 0x71, 0x16, 0x86, 0xa9,
	0x97, 0xf1, 0x58, 0xb9, 0x5e, 0xc6, 0x3d, 0xac, 0x38, 0x40, 0x9d, 0x03, 0xad, 0xbd, 0x90, 0x71,
	0x6f, 0x23, 0xc0, 0x52, 0x95, 0x77, 0xf7, 0xf5, 0x22, 0x1e, 0x75, 0x4c, 0xee, 0xf5, 0xa0, 0xf5,
	0x86, 0x97, 0x51, 0x02, 0xf5, 0xbd, 0x2c, 0x30, 0x46, 0xa0, 0x36, 0x7b, 0x16, 0x5a, 0x01, 0x97,
	0x3e, 0xd9, 0xa0, 0xbf, 0xfe, 0x58, 0x69, 0x64, 0xfc, 0x62, 0x7a, 0x89, 0x4b, 0xdf, 0xa1, 0x01,
	0xec, 0x3c, 0xb4, 0xf9, 0x9e, 0xca, 0x3c, 0x3a, 0x6b, 0xbf, 0x1a, 0x41, 0x34, 0xf2, 0x4d, 0xec,
	0x73, 0xf4, 0x10, 0xf6, 0x02, 0x74, 0x02, 0x21, 0xd3, 0xd0, 0x5b, 0x90, 0x11, 0xfa, 0xeb, 0x27,
	0xf6, 0xcf, 0xab, 0x7b, 0x9d, 0x7c, 0xd8, 0xf8, 0xe7, 0x2d, 0x68, 0xe1, 0x62, 0xec, 0x69, 0x80,
	0x60, 0x11, 0x7b, 0x91, 0xf0, 0xcb, 0x9a, 0xdb, 0x33, 0x9a, 0x8d, 0x80, 0x9d, 0x02, 0x48, 0x32,
	0x31, 0x73, 0x83, 0x45, 0x59, 0x78, 0xbb, 0xa8, 0xb9, 0xb4, 0xd8, 0x08, 0xd8, 0x97, 0xa0, 0x47,
	0xbd, 0x14, 0x41, 0x3a, 0xd2, 0x9f, 0x2a, 0x57, 0xbe, 0xa4, 0x67, 0xc1, 0x65, 0x30, 0x9a, 0xf4,
	0x77, 0x14, 0x57, 0x63, 0xe8, 0xa5, 0x19, 0x37, 0x93, 0xb6, 0x74, 0x35, 0x4f, 0x33, 0x4e, 0x73,
	0x8e, 0xa0, 0xe3, 0x27, 0x51, 0xc4, 0x63, 0x45, 0x27, 0x6f, 0x3b, 0xb9, 0xa8, 0x9d, 0x77, 0x9b,
	0xd3, 0x11, 0xdb, 0x0e, 0xb5, 0x51, 0xb7, 0x2b, 0xf8, 0x1d, 0x93, 0x83, 0xa9, 0xad, 0xe3, 0x21,
	0x4d, 0xa4, 0x22, 0x37, 0x53, 0x3c, 0xa0, 0xc4, 0x4e, 0x41, 0x4f, 0x89, 0x88, 0x4b, 0xe5, 0x45,
	0xa9, 0x89, 0xf7, 0x52, 0xc1, 0x9e, 0x87, 0x16, 0x1d, 0x03, 0x1e, 0x74, 0x0c, 0x1a, 0x86, 0x0b,
	0x6f, 0xed, 0x1a, 0xd7, 0xf7, 0x1c, 0x6a, 0x23, 0x6e, 0x4a, 0x5b, 0xba, 0x52, 0x65, 0xa3, 0x01,
	0xf5, 0x0e, 0x0a, 0x7b, 0x6e, 0xaa, 0x2c, 0xc7, 0xdb, 0x72, 0x89, 0xb7, 0x8b, 0x30, 0x98, 0x4b,
	0x9e, 0xb9, 0x69, 0x96, 0x6c, 0x8b, 0x90, 0x8f, 0x86, 0xfb, 0xd3, 0x40, 0x81, 0x8d, 0xe9, 0x4d,
	0xc9, 0xb3, 0xeb, 0x7a, 0x98, 0xd3, 0x9f, 0x97, 0xc2, 0x98, 0x43, 0xbf, 0xd2, 0x87, 0x84, 0x40,
	0xc4, 0xdb, 0x09, 0x39, 0xb4, 0x46, 0x08, 0x0e, 0x9d, 0x6a, 0xaa, 0xe3, 0x18, 0xbf, 0x18, 0x9f,
	0x82, 0x56, 0x1e, 0xc2, 0x3a, 0x30, 0xad, 0x4a, 0x60, 0x8e, 0x9f, 0x83, 0x36, 0x21, 0x8f, 0xad,
	0xc2, 0x80, 0x18, 0x8f, 0xe7, 0x73, 0x57, 0x25, 0x69, 0x5e, 0x9b, 0x91, 0xf8, 0x78, 0x3e, 0xbf,
	0x91, 0xa4, 0xe3, 0x3f, 0x35, 0xa1, 0x63, 0x70, 0xc7, 0x5e, 0x03, 0xe0, 0x51, 0xf2, 0x1d, 0xe1,
	0x56, 0x36, 0xb5, 0x7a, 0x38, 0x46, 0xa7, 0x6f, 0xe2, 0x40, 0xda, 0x50, 0x8f, 0xe7, 0x4d, 0xf6,
	0x32, 0x2c, 0x21, 0x7a, 0x0c, 0xfd, 0xed, 0xaf, 0x3f, 0x7d, 0xc4, 0xc7, 0xd7, 0x68, 0x90, 0x63,
	0x06, 0x8f, 0x3f, 0x6c, 0x40, 0xaf, 0x98, 0x8f, 0x7d, 0x13, 0x96, 0xf5, 0x2e, 0x02, 0xae, 0x3c,
	0x11, 0x62, 0x2d, 0xc4, 0x4c, 0xf7, 0xf9, 0x07, 0x6d, 0x44, 0xb7, 0x2e, 0xd1, 0x47, 0xce, 0x80,
	0x97, 0x82, 0x1c, 0xff, 0xc4, 0x82, 0x7e, 0xa5, 0x17, 0xc3, 0x49, 0x2f, 0x51, 0x31, 0x9d, 0x3e,
	0xc6, 0x55, 0xcc, 0x6b, 0x43, 0x68, 0x98, 0x30, 0x6a, 0x3b, 0x0d, 0x11, 0xe0, 0xf0, 0xd4, 0xf3,
	0x6f, 0x7b, 0x33, 0xee, 0x1a, 0x06, 0xdb, 0x76, 0x7a, 0x46, 0xb3, 0x11, 0xa0, 0x0f, 0x90, 0x88,
	0xea, 0x34, 0xd8, 0x76, 0xb4, 0x80, 0xd0, 0x23, 0xa4, 0xea, 0xf0, 0x28, 0xe0, 0xa8, 0xf8, 0x9e,
	0x32, 0x39, 0x90, 0xda, 0x79, 0x49, 0xed, 0x14, 0x25, 0x75, 0xbc, 0x01, 0x4b, 0xda, 0x40, 0x9f,
	0xda, 0x21, 0x93, 0x4f, 0x2c, 0x58, 0x31, 0x91, 0xb1, 0xb9, 0x9b, 0x91, 0xd3, 0xdf, 0x11, 0x52,
	0x25, 0xd9, 0xe2, 0x11, 0x6b, 0xe0, 0x85, 0x5a, 0x0d, 0x7c, 0xfe, 0x40, 0xfc, 0x1d, 0xb1, 0x4a,
	0xb5, 0x22, 0xee, 0x98, 0x82, 0x78, 0x16, 0xda, 0x98, 0x6b, 0x73, 0xff, 0x0e, 0xeb, 0xe7, 0x72,
	0x74, 0x27, 0xde, 0x28, 0x76, 0x3c, 0xe9, 0x46, 0x49, 0xc6, 0x8d, 0x47, 0x3a, 0x3b, 0x9e, 0xbc,
	0x92, 0x64, 0x9c, 0x9d, 0x86, 0x7e, 0xcc, 0xf7, 0x94, 0x9b, 0x6c, 0x6f, 0x4b, 0xae, 0xcc, 0xcd,
	0x02, 0x50, 0x75, 0x8d, 0x34, 0x93, 0x4f, 0x1a, 0x70, 0xaa, 0xdc, 0x97, 0x69, 0x5d, 0xe5, 0x77,
	0x1e, 0xf1, 0xec, 0xaf, 0xd5, 0xce, 0xfe, 0xb9, 0xc3, 0xce, 0x7e, 0x70, 0x8d, 0xea, 0xc9, 0xff,
	0x59, 0xb9, 0x3f, 0xc5, 0xfc, 0x8e, 0x1b, 0xcf, 0xa3, 0x9c, 0x0c, 0xc4, 0xfc, 0xce, 0xd5, 0x79,
	0x84, 0xb7, 0x1e, 0xbe, 0x27, 0xa4, 0x72, 0x67, 0x5e, 0x6a, 0x8e, 0xdb, 0x25, 0xc5, 0xdb, 0x5e,
	0x8a, 0x30, 0x9c, 0xa7, 0x81, 0xa7, 0x38, 0x7d, 0x68, 0x60, 0xa8, 0x35, 0xe6, 0xdb, 0x24, 0xe5,
	0xb1, 0x9b, 0xf9, 0x51, 0x60, 0xa0, 0xd8, 0x45, 0x85, 0xe3, 0x47, 0x41, 0x69, 0xec, 0xf6, 0xfd,
	0x8c, 0x7d, 0x16, 0x86, 0x91, 0xb7, 0xe7, 0x56, 0x4a, 0x8d, 0xa6, 0xd4, 0x83, 0xc8, 0xdb, 0xbb,
	0x54, 0x54, 0x9b, 0x73, 0x30, 0xdc, 0xd1, 0xee, 0xcd, 0x4d, 0xaf, 0xcb, 0xf7, 0xb2, 0xd1, 0x1a,
	0xeb, 0xbf, 0x0f, 0x27, 0x1c, 0x1e, 0x7a, 0x4a, 0x24, 0xf1, 0x95, 0x24, 0x10, 0xdb, 0x8f, 0x0a,
	0x39, 0x1b, 0x9a, 0x4a, 0x85, 0xf9, 0xc5, 0x51, 0xa9, 0x70, 0xf2, 0x63, 0x0b, 0x46, 0x6f, 0x73,
	0x75, 0x41, 0x29, 0x1e, 0xe3, 0xf4, 0x9f, 0x82, 0xd3, 0xbd, 0x5a, 0xf3, 0xe9, 0xb3, 0x35, 0xe6,
	0x7e, 0xe8, 0xfc, 0x55, 0x7f, 0x8e, 0x8d, 0x3b, 0x99, 0xa1, 0x64, 0x08, 0xe4, 0xa6, 0x26, 0x5a,
	0x93, 0x9f, 0x36, 0x61, 0x19, 0x4d, 0xfb, 0x9e, 0x50, 0x3b, 0x1b, 0x11, 0x2e, 0xf5, 0x02, 0xb4,
	0x84, 0xe2, 0x91, 0x09, 0xe3, 0x53, 0x75, 0x0f, 0x14, 0xc3, 0xa6, 0x1b, 0x8a, 0x47, 0x0e, 0x8d,
	0x1c, 0xff, 0xbb, 0x01, 0x2d, 0x14, 0x4d, 0x42, 0xd2, 0x65, 0x1f, 0x13, 0x52, 0x41, 0xbc, 0x1a,
	0x55, 0xe2, 0xb5, 0x0a, 0x7d, 0xe4, 0x24, 0x99, 0x48, 0x71, 0xd3, 0x86, 0xaa, 0x55, 0x55, 0xc8,
	0x2b, 0x7d, 0x4f, 0xf1, 0x59, 0x92, 0x2d, 0x0c, 0x67, 0x2b, 0x64, 0xf6, 0x3a, 0x74, 0x53, 0xe1,
	0xab, 0x79, 0xc6, 0x73, 0x90, 0x9c, 0xbd, 0xdf, 0x16, 0xa7, 0xd7, 0xf5, 0x60, 0xa7, 0xf8, 0x0a,
	0x71, 0x91, 0xb7, 0x5d, 0x3f, 0x99, 0xc7, 0xca, 0x70, 0x80, 0xe5, 0x5c, 0xfb, 0x06, 0x2a, 0x31,
	0x6c, 0xe7, 0x69, 0x98, 0x78, 0x81, 0x8b, 0x65, 0xdd, 0x60, 0x07, 0xb4, 0xea, 0x86, 0x88, 0xf8,
	0x78, 0x01, 0x1d, 0x33, 0x39, 0x06, 0x8a, 0x88, 0x66, 0xae, 0xcc, 0x7c, 0x93, 0xa5, 0x97, 0x44,
	0x34, 0xdb, 0xcc, 0x7c, 0x7a, 0x1e, 0x88, 0x66, 0xee, 0x1d, 0x11, 0xa8, 0x9d, 0x3c, 0x50, 0x44,
	0x34, 0x7b, 0x0f, 0x65, 0x0c, 0x14, 0xec, 0xdc, 0xe1, 0x62, 0xb6, 0xa3, 0xf2, 0x40, 0x11, 0xd1,
	0xec, 0x1d, 0x52, 0x60, 0x4a, 0xa1, 0x49, 0x91, 0x5d, 0xa3, 0x15, 0x1a, 0x0e, 0x2e, 0xb2, 0x29,
	0x3e, 0xe0, 0x93, 0x5f, 0x37, 0x61, 0x90, 0x9f, 0x15, 0x73, 0x30, 0xfb, 0x42, 0xcd, 0x69, 0x27,
	0x0f, 0x5a, 0x04, 0x47, 0x55, 0x7c, 0x46, 0x9c, 0xb6, 0x2c, 0x81, 0xbd, 0xbc, 0xc6, 0xb1, 0x8b,
	0xd0, 0xd7, 0x2d, 0x17, 0xf9, 0x80, 0xc1, 0xdb, 0x99, 0x23, 0xe6, 0xd3, 0xe9, 0x1f, 0x4b, 0xbf,
	0x03, 0x49, 0xd1, 0x1e, 0xff, 0xcc, 0x32, 0x78, 0x20, 0xf6, 0x15, 0x23, 0x3a, 0x8d, 0x59, 0x72,
	0xb1, 0xce, 0x9e, 0x34, 0x11, 0xac, 0xb0, 0xa7, 0x47, 0x65, 0x82, 0x8f, 0x43, 0x3b, 0xe3, 0x69,
	0xb8, 0x30, 0x2c, 0x50, 0x0b, 0x08, 0xfb, 0x48, 0x48, 0x69, 0x68, 0x3e, 0xb5, 0xa9, 0xc2, 0x89,
	0x54, 0x16, 0x15, 0x4e, 0xa4, 0x72, 0xbc, 0x07, 0x50, 0x1e, 0x88, 0x7d, 0xb5, 0xc6, 0x79, 0x9e,
	0x79, 0xa0, 0x05, 0xaa, 0xac, 0x67, 0x6a, 0x58, 0x8f, 0x21, 0x67, 0x56, 0x49, 0xce, 0x0a, 0x1e,
	0xd4, 0xa8, 0xf0, 0xa0, 0xc9, 0xaf, 0xac, 0x32, 0x08, 0x6f, 0x89, 0x80, 0x27, 0xb8, 0x3f, 0x22,
	0xf6, 0x86, 0xec, 0x13, 0x87, 0x1f, 0x43, 0x37, 0x98, 0x67, 0x94, 0xa8, 0x72, 0x28, 0xe5, 0x32,
	0x5a, 0xda, 0x64, 0xc3, 0xfc, 0x11, 0xce, 0x88, 0xd8, 0x93, 0xce, 0xb7, 0x82, 0xbc, 0xee, 0x23,
	0x37, 0xd6, 0xe2, 0xd1, 0x57, 0x62, 0x45, 0x3b, 0x34, 0x57, 0x62, 0x12, 0x10, 0x2e, 0xbb, 0xb8,
	0xb1, 0xfc, 0x7d, 0xc2, 0x48, 0xf9, 0x65, 0xa9, 0x5b, 0x5c, 0x96, 0x26, 0xbf, 0xb3, 0x34, 0x34,
	0x6f, 0x60, 0x7d, 0x8b, 0xc3, 0xc5, 0xfd, 0xa1, 0x99, 0x8f, 0xaa, 0xa6, 0x93, 0xef, 0xe7, 0xf0,
	0x79, 0x0c, 0xda, 0x59, 0x5a, 0x5e, 0x24, 0x5a, 0x59, 0x5a, 0xbe, 0xcf, 0x35, 0x4a, 0x9b, 0x56,
	0x50, 0xd6, 0xac, 0xa3, 0x0c, 0x73, 0xac, 0x2a, 0xde, 0x01, 0xa8, 0x5d, 0x47, 0x5e, 0x67, 0x3f,
	0xf2, 0x0a, 0x04, 0x69, 0xb2, 0xaf, 0x85, 0xc9, 0x8f, 0xac, 0x32, 0xdc, 0xae, 0x23, 0xf9, 0x2f,
	0x4c, 0x67, 0x55, 0x4d, 0x37, 0x82, 0x8e, 0x9c, 0x47, 0x91, 0x97, 0x2d, 0xf2, 0xf4, 0x6d, 0x44,
	0x1d, 0xe9, 0xc8, 0xcb, 0xe6, 0x59, 0x28, 0x47, 0xcd, 0xd5, 0x26, 0x12, 0x39, 0xd2, 0xdc, 0xcc,
	0x42, 0x89, 0xdd, 0x5b, 0x5e, 0x1c, 0xf3, 0xcc, 0x2d, 0x5f, 0x2d, 0x7a, 0x5a, 0x73, 0x33, 0x0b,
	0xd9, 0x19, 0x18, 0xa4, 0xf3, 0xad, 0x50, 0xc8, 0x1d, 0x9d, 0x8a, 0x34, 0x90, 0xfb, 0x46, 0x87,
	0xb9, 0x68, 0x72, 0xbc, 0x04, 0xd0, 0x95, 0xb9, 0x14, 0xfe, 0xe4, 0x17, 0xad, 0x52, 0x73, 0x21,
	0x16, 0x11, 0x67, 0xef, 0xc2, 0xb2, 0x97, 0x8a, 0x4d, 0xee, 0xc9, 0x24, 0xde, 0x28, 0x91, 0x7d,
	0xee, 0x20, 0xb2, 0x69, 0xfc, 0xf4, 0x42, 0x75, 0xb0, 0x53, 0xff, 0x16, 0xb7, 0xb4, 0x35, 0x0f,
	0x43, 0xae, 0x4c, 0x06, 0xd5, 0xee, 0xe8, 0x6b, 0x9d, 0xce, 0x9f, 0xc5, 0xad, 0xbd, 0x59, 0xbd,
	0xb5, 0x23, 0xa5, 0x4d, 0x85, 0x4c, 0x02, 0x5e, 0xde, 0xd6, 0x7a, 0x46, 0xa3, 0x39, 0xaa, 0x88,
	0x03, 0xbe, 0x97, 0x63, 0x92, 0x04, 0x4c, 0xc5, 0xd4, 0x70, 0xb5, 0xd1, 0x35, 0x32, 0x81, 0x54,
	0x37, 0xc8, 0xf2, 0x4f, 0x41, 0x17, 0x89, 0x0a, 0x85, 0x8c, 0x66, 0xa8, 0x48, 0x5c, 0xf2, 0x2b,
	0x29, 0xf2, 0x4e, 0xb3, 0x4f, 0x7d, 0x2f, 0xef, 0xa1, 0xa6, 0xc8, 0xf2, 0xe4, 0x63, 0xd3, 0xaf,
	0xaf, 0xe6, 0x40, 0x2a, 0x3d, 0xc0, 0xf0, 0xde, 0x7e, 0xc9, 0x7b, 0xff, 0x6c, 0xc1, 0x72, 0xcd,
	0x38, 0xb8, 0xfc, 0xd6, 0x2c, 0xd2, 0xe9, 0x4a, 0x63, 0xb5, 0xb3, 0x35, 0x8b, 0xf2, 0x94, 0xa4,
	0xad, 0xd0, 0xa8, 0x5a, 0x41, 0xbf, 0x1a, 0x6f, 0x8b, 0x58, 0xc8, 0x1d, 0xc3, 0x18, 0xba, 0x42,
	0xbe, 0x45, 0x32, 0x76, 0x4a, 0x9a, 0xbb, 0xb4, 0x50, 0x57, 0x2b, 0x36, 0x82, 0x23, 0x82, 0xf6,
	0x34, 0xf4, 0x55, 0xa2, 0xbc, 0xb0, 0x52, 0xcf, 0x9a, 0x0e, 0x90, 0x4a, 0x9f, 0x62, 0x08, 0x0d,
	0x25, 0x0d, 0xdc, 0x1b, 0x4a, 0xe2, 0x1a, 0xb8, 0x5b, 0x7d, 0xb1, 0xd0, 0xd1, 0xdb, 0x45, 0x05,
	0xde, 0x2b, 0x26, 0x1f, 0x5b, 0x30, 0xcc, 0xb1, 0xb0, 0x79, 0x9b, 0x2b, 0x7f, 0x87, 0x7d, 0x11,
	0x5a, 0xbb, 0x5c, 0x2a, 0x83, 0x99, 0xa7, 0x0f, 0x62, 0x46, 0x8f, 0x9b, 0xde, 0xe2, 0x52, 0x39,
	0x34, 0x94, 0xbd, 0x02, 0x4b, 0x92, 0x94, 0xe6, 0x92, 0x75, 0xfa, 0xc8, 0x8f, 0xf4, 0x3f, 0xc7,
	0x0c, 0x1f, 0xaf, 0x43, 0x0b, 0xa7, 0x39, 0x24, 0x7b, 0x56, 0x22, 0xbd, 0x51, 0x8b, 0xf4, 0xf1,
	0xab, 0xb0, 0x64, 0x76, 0x7a, 0x78, 0x68, 0x9e, 0x84, 0x1e, 0x82, 0xc3, 0xa5, 0x6b, 0x8d, 0xfe,
	0xb6, 0x8b, 0x0a, 0xcc, 0x3f, 0x93, 0x0f, 0x1b, 0x65, 0x78, 0x5f, 0x16, 0xbb, 0xd5, 0xa7, 0x21,
	0x6b, 0xff, 0xd3, 0xd0, 0xbe, 0xdc, 0x73, 0xe4, 0x83, 0x93, 0x76, 0x7a, 0xab, 0xea, 0xf4, 0xc3,
	0x5d, 0xb7, 0x0a, 0x03, 0x7a, 0xf8, 0xd9, 0x5d, 0x77, 0x2b, 0x69, 0x17, 0x50, 0x77, 0x6b, 0x9d,
	0xae, 0x79, 0xfb, 0x7e, 0x45, 0xe8, 0x3c, 0xe4, 0x1b, 0xe8, 0x2b, 0x30, 0xa0, 0x87, 0xd4, 0x23,
	0x7f, 0x7d, 0xa8, 0x3c, 0xd5, 0xd6, 0x9e, 0x9b, 0xff, 0xdb, 0x2c, 0xdd, 0x8f, 0x73, 0xdf, 0x5a,
	0x67, 0xef, 0xc2, 0x90, 0xb6, 0x40, 0x91, 0x24, 0xee, 0x9b, 0x3c, 0xf4, 0x17, 0xb4, 0xa9, 0xeb,
	0xa1, 0xb7, 0xa0, 0xe4, 0x31, 0x08, 0x2b, 0x92, 0xbe, 0x87, 0x2e, 0x0c, 0x2b, 0x6c, 0x3a, 0x5a,
	0x28, 0xee, 0xa1, 0x3a, 0x1a, 0xa8, 0x3d, 0xfe, 0x57, 0x03, 0x06, 0x97, 0xf7, 0x7d, 0x7a, 0xc8,
	0x4b, 0xe0, 0xe1, 0x34, 0xb3, 0xf2, 0xe3, 0x4f, 0xb3, 0xf6, 0xe3, 0xcf, 0x3e, 0x7b, 0xb6, 0x1e,
	0xd2, 0x9e, 0xf9, 0x6b, 0x5f, 0xfb, 0xe0, 0x6b, 0xdf, 0x52, 0x09, 0x88, 0x27, 0xa1, 0x43, 0x93,
	0x8b, 0x20, 0x7f, 0x2c, 0x44, 0xb1, 0xfe, 0xc0, 0xd7, 0xad, 0x3e, 0xf0, 0x21, 0x34, 0xa9, 0x83,
	0xbc, 0xdf, 0xd3, 0xd0, 0x44, 0x05, 0xf9, 0xfe, 0xe1, 0x1e, 0x0f, 0xd7, 0xc0, 0xae, 0x8e, 0xa2,
	0x99, 0x74, 0xc2, 0x1a, 0x96, 0xe3, 0x68, 0xbe, 0x93, 0xd0, 0x23, 0xa3, 0x90, 0xa9, 0x07, 0x3a,
	0xb7, 0xa0, 0x02, 0x73, 0xd5, 0xf9, 0x67, 0x00, 0xca, 0xb3, 0xb3, 0x01, 0x74, 0xaf, 0x26, 0x97,
	0xc5, 0xae, 0x88, 0x67, 0xf6, 0x31, 0x06, 0xb0, 0x64, 0xda, 0xd6, 0xf9, 0x15, 0xe8, 0x57, 0xde,
	0xeb, 0x59, 0x07, 0x9a, 0xd7, 0xb6, 0xb7, 0xed, 0x63, 0x6c, 0x09, 0x1a, 0xd7, 0x62, 0xdb, 0x3a,
	0x7f, 0x0e, 0xa0, 0xc4, 0x96, 0x9e, 0x27, 0x7e, 0x13, 0x6f, 0x87, 0xf6, 0x31, 0xd6, 0x83, 0xb6,
	0x6e, 0x5a, 0xe7, 0x5f, 0x82, 0xfe, 0x66, 0xf9, 0xeb, 0x15, 0xae, 0x70, 0x35, 0xc9, 0x22, 0x2f,
	0xb4, 0x8f, 0xe1, 0x94, 0xd7, 0xbd, 0x85, 0x6d, 0x31, 0x1b, 0x06, 0xdf, 0xe2, 0x5e, 0xf6, 0x16,
	0x97, 0x4a, 0xec, 0x7a, 0xa1, 0xdd, 0x38, 0xff, 0x91, 0x05, 0xc7, 0xf7, 0x31, 0x40, 0xd6, 0x87,
	0xce, 0xcd, 0xf8, 0x76, 0x9c, 0xdc, 0x89, 0xed, 0x63, 0x6c, 0x08, 0x90, 0xd3, 0x33, 0x11, 0xdb,
	0x16, 0x5b, 0x86, 0x5e, 0x71, 0x25, 0xb0, 0x1b, 0xb8, 0x9d, 0x9c, 0x74, 0xd8, 0xad, 0xbc, 0x93,
	0x48, 0x97, 0xdd, 0xc5, 0xce, 0xbc, 0xc6, 0xdb, 0xaf, 0xb3, 0xa1, 0xee, 0xa4, 0x82, 0x6a, 0xdf,
	0x6d, 0xe4, 0x32, 0x95, 0x47, 0xfb, 0x2e, 0x7e, 0x4c, 0xa3, 0xaf, 0x08, 0x29, 0xed, 0xbb, 0x5d,
	0x76, 0x5c, 0x2f, 0xac, 0xf3, 0x90, 0x7d, 0xd7, 0xce, 0xfb, 0xd1, 0xa6, 0xf6, 0xdf, 0x57, 0xf3,
	0x7e, 0x1d, 0x20, 0xf6, 0x1f, 0xce, 0x5c, 0x7c, 0xe2, 0xa3, 0x7b, 0x2b, 0xd6, 0x6f, 0xef, 0xad,
	0x58, 0x7f, 0xb9, 0xb7, 0x62, 0xfd, 0xf0, 0xaf, 0x2b, 0xc7, 0xbe, 0xdd, 0xf4, 0x52, 0xb1, 0xb5,
	0x44, 0xbf, 0x34, 0xbf, 0xf8, 0xbf, 0x00, 0x00, 0x00, 0xff, 0xff, 0xaf, 0xf9, 0xae, 0x29, 0x77,
	0x1e, 0x00, 0x00,
}

func (m *Sliver2CoinsStatusResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Sliver2CoinsStatusResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Sliver2CoinsStatusResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Data != nil {
		{
			size, err := m.Data.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintBili(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if len(m.Message) > 0 {
		i -= len(m.Message)
		copy(dAtA[i:], m.Message)
		i = encodeVarintBili(dAtA, i, uint64(len(m.Message)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Msg) > 0 {
		i -= len(m.Msg)
		copy(dAtA[i:], m.Msg)
		i = encodeVarintBili(dAtA, i, uint64(len(m.Msg)))
		i--
		dAtA[i] = 0x12
	}
	if m.Code != 0 {
		i = encodeVarintBili(dAtA, i, uint64(m.Code))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Sliver2CoinsStatusResponse_Data) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Sliver2CoinsStatusResponse_Data) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Sliver2CoinsStatusResponse_Data) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Coin != 0 {
		i = encodeVarintBili(dAtA, i, uint64(m.Coin))
		i--
		dAtA[i] = 0x10
	}
	if m.Silver != 0 {
		i = encodeVarintBili(dAtA, i, uint64(m.Silver))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *BaseResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BaseResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BaseResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Message) > 0 {
		i -= len(m.Message)
		copy(dAtA[i:], m.Message)
		i = encodeVarintBili(dAtA, i, uint64(len(m.Message)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Msg) > 0 {
		i -= len(m.Msg)
		copy(dAtA[i:], m.Msg)
		i = encodeVarintBili(dAtA, i, uint64(len(m.Msg)))
		i--
		dAtA[i] = 0x12
	}
	if m.Code != 0 {
		i = encodeVarintBili(dAtA, i, uint64(m.Code))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *RoomInitResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RoomInitResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RoomInitResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Data != nil {
		{
			size, err := m.Data.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintBili(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Message) > 0 {
		i -= len(m.Message)
		copy(dAtA[i:], m.Message)
		i = encodeVarintBili(dAtA, i, uint64(len(m.Message)))
		i--
		dAtA[i] = 0x12
	}
	if m.Code != 0 {
		i = encodeVarintBili(dAtA, i, uint64(m.Code))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *RoomInitResponse_Data) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RoomInitResponse_Data) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RoomInitResponse_Data) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.SpecialType != 0 {
		i = encodeVarintBili(dAtA, i, uint64(m.SpecialType))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x80
	}
	if m.IsSp != 0 {
		i = encodeVarintBili(dAtA, i, uint64(m.IsSp))
		i--
		dAtA[i] = 0x78
	}
	if m.LiveStatus != 0 {
		i = encodeVarintBili(dAtA, i, uint64(m.LiveStatus))
		i--
		dAtA[i] = 0x40
	}
	if m.IsLocked {
		i--
		if m.IsLocked {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x30
	}
	if m.IsHidden {
		i--
		if m.IsHidden {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x28
	}
	if m.Uid != 0 {
		i = encodeVarintBili(dAtA, i, uint64(m.Uid))
		i--
		dAtA[i] = 0x18
	}
	if m.ShortId != 0 {
		i = encodeVarintBili(dAtA, i, uint64(m.ShortId))
		i--
		dAtA[i] = 0x10
	}
	if m.RoomId != 0 {
		i = encodeVarintBili(dAtA, i, uint64(m.RoomId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *XSpaceAccInfoResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *XSpaceAccInfoResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *XSpaceAccInfoResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Data != nil {
		{
			size, err := m.Data.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintBili(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Message) > 0 {
		i -= len(m.Message)
		copy(dAtA[i:], m.Message)
		i = encodeVarintBili(dAtA, i, uint64(len(m.Message)))
		i--
		dAtA[i] = 0x12
	}
	if m.Code != 0 {
		i = encodeVarintBili(dAtA, i, uint64(m.Code))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *XSpaceAccInfoResponse_Data) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *XSpaceAccInfoResponse_Data) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *XSpaceAccInfoResponse_Data) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.LiveRoom != nil {
		{
			size, err := m.LiveRoom.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintBili(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x8a
	}
	if m.Level != 0 {
		i = encodeVarintBili(dAtA, i, uint64(m.Level))
		i--
		dAtA[i] = 0x38
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintBili(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if m.Mid != 0 {
		i = encodeVarintBili(dAtA, i, uint64(m.Mid))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *XSpaceAccInfoResponse_Data_LiveRoom) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *XSpaceAccInfoResponse_Data_LiveRoom) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *XSpaceAccInfoResponse_Data_LiveRoom) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.RoundStatus != 0 {
		i = encodeVarintBili(dAtA, i, uint64(m.RoundStatus))
		i--
		dAtA[i] = 0x38
	}
	if m.Roomid != 0 {
		i = encodeVarintBili(dAtA, i, uint64(m.Roomid))
		i--
		dAtA[i] = 0x30
	}
	if len(m.Cover) > 0 {
		i -= len(m.Cover)
		copy(dAtA[i:], m.Cover)
		i = encodeVarintBili(dAtA, i, uint64(len(m.Cover)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Title) > 0 {
		i -= len(m.Title)
		copy(dAtA[i:], m.Title)
		i = encodeVarintBili(dAtA, i, uint64(len(m.Title)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Url) > 0 {
		i -= len(m.Url)
		copy(dAtA[i:], m.Url)
		i = encodeVarintBili(dAtA, i, uint64(len(m.Url)))
		i--
		dAtA[i] = 0x1a
	}
	if m.LiveStatus != 0 {
		i = encodeVarintBili(dAtA, i, uint64(m.LiveStatus))
		i--
		dAtA[i] = 0x10
	}
	if m.RoomStatus != 0 {
		i = encodeVarintBili(dAtA, i, uint64(m.RoomStatus))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetRoomInfoOldResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetRoomInfoOldResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetRoomInfoOldResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Data != nil {
		{
			size, err := m.Data.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintBili(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Message) > 0 {
		i -= len(m.Message)
		copy(dAtA[i:], m.Message)
		i = encodeVarintBili(dAtA, i, uint64(len(m.Message)))
		i--
		dAtA[i] = 0x12
	}
	if m.Code != 0 {
		i = encodeVarintBili(dAtA, i, uint64(m.Code))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetRoomInfoOldResponse_Data) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetRoomInfoOldResponse_Data) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetRoomInfoOldResponse_Data) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.OnlineHidden != 0 {
		i = encodeVarintBili(dAtA, i, uint64(m.OnlineHidden))
		i--
		dAtA[i] = 0x50
	}
	if m.BroadcastType != 0 {
		i = encodeVarintBili(dAtA, i, uint64(m.BroadcastType))
		i--
		dAtA[i] = 0x48
	}
	if m.Roomid != 0 {
		i = encodeVarintBili(dAtA, i, uint64(m.Roomid))
		i--
		dAtA[i] = 0x40
	}
	if m.Online != 0 {
		i = encodeVarintBili(dAtA, i, uint64(m.Online))
		i--
		dAtA[i] = 0x38
	}
	if len(m.Cover) > 0 {
		i -= len(m.Cover)
		copy(dAtA[i:], m.Cover)
		i = encodeVarintBili(dAtA, i, uint64(len(m.Cover)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Title) > 0 {
		i -= len(m.Title)
		copy(dAtA[i:], m.Title)
		i = encodeVarintBili(dAtA, i, uint64(len(m.Title)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Url) > 0 {
		i -= len(m.Url)
		copy(dAtA[i:], m.Url)
		i = encodeVarintBili(dAtA, i, uint64(len(m.Url)))
		i--
		dAtA[i] = 0x22
	}
	if m.LiveStatus != 0 {
		i = encodeVarintBili(dAtA, i, uint64(m.LiveStatus))
		i--
		dAtA[i] = 0x18
	}
	if m.RoundStatus != 0 {
		i = encodeVarintBili(dAtA, i, uint64(m.RoundStatus))
		i--
		dAtA[i] = 0x10
	}
	if m.RoomStatus != 0 {
		i = encodeVarintBili(dAtA, i, uint64(m.RoomStatus))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *FeedListResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FeedListResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FeedListResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Data != nil {
		{
			size, err := m.Data.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintBili(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Message) > 0 {
		i -= len(m.Message)
		copy(dAtA[i:], m.Message)
		i = encodeVarintBili(dAtA, i, uint64(len(m.Message)))
		i--
		dAtA[i] = 0x12
	}
	if m.Code != 0 {
		i = encodeVarintBili(dAtA, i, uint64(m.Code))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *FeedListResponse_Data) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FeedListResponse_Data) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FeedListResponse_Data) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.List) > 0 {
		for iNdEx := len(m.List) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.List[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintBili(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.Pagesize) > 0 {
		i -= len(m.Pagesize)
		copy(dAtA[i:], m.Pagesize)
		i = encodeVarintBili(dAtA, i, uint64(len(m.Pagesize)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Page) > 0 {
		i -= len(m.Page)
		copy(dAtA[i:], m.Page)
		i = encodeVarintBili(dAtA, i, uint64(len(m.Page)))
		i--
		dAtA[i] = 0x12
	}
	if m.Result != 0 {
		i = encodeVarintBili(dAtA, i, uint64(m.Result))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *FeedListResponse_Data_ListInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FeedListResponse_Data_ListInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FeedListResponse_Data_ListInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.AreaId != 0 {
		i = encodeVarintBili(dAtA, i, uint64(m.AreaId))
		i--
		dAtA[i] = 0x58
	}
	if m.ParentAreaId != 0 {
		i = encodeVarintBili(dAtA, i, uint64(m.ParentAreaId))
		i--
		dAtA[i] = 0x50
	}
	if m.Uid != 0 {
		i = encodeVarintBili(dAtA, i, uint64(m.Uid))
		i--
		dAtA[i] = 0x48
	}
	if len(m.Link) > 0 {
		i -= len(m.Link)
		copy(dAtA[i:], m.Link)
		i = encodeVarintBili(dAtA, i, uint64(len(m.Link)))
		i--
		dAtA[i] = 0x42
	}
	if m.Online != 0 {
		i = encodeVarintBili(dAtA, i, uint64(m.Online))
		i--
		dAtA[i] = 0x38
	}
	if len(m.Pic) > 0 {
		i -= len(m.Pic)
		copy(dAtA[i:], m.Pic)
		i = encodeVarintBili(dAtA, i, uint64(len(m.Pic)))
		i--
		dAtA[i] = 0x32
	}
	if m.Roomid != 0 {
		i = encodeVarintBili(dAtA, i, uint64(m.Roomid))
		i--
		dAtA[i] = 0x28
	}
	if len(m.Title) > 0 {
		i -= len(m.Title)
		copy(dAtA[i:], m.Title)
		i = encodeVarintBili(dAtA, i, uint64(len(m.Title)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Uname) > 0 {
		i -= len(m.Uname)
		copy(dAtA[i:], m.Uname)
		i = encodeVarintBili(dAtA, i, uint64(len(m.Uname)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Face) > 0 {
		i -= len(m.Face)
		copy(dAtA[i:], m.Face)
		i = encodeVarintBili(dAtA, i, uint64(len(m.Face)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Cover) > 0 {
		i -= len(m.Cover)
		copy(dAtA[i:], m.Cover)
		i = encodeVarintBili(dAtA, i, uint64(len(m.Cover)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Card) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Card) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Card) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Display != nil {
		{
			size, err := m.Display.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintBili(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if m.Extra != nil {
		{
			size, err := m.Extra.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintBili(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.Desc != nil {
		{
			size, err := m.Desc.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintBili(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Card) > 0 {
		i -= len(m.Card)
		copy(dAtA[i:], m.Card)
		i = encodeVarintBili(dAtA, i, uint64(len(m.Card)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Card_Desc) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Card_Desc) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Card_Desc) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.UserProfile != nil {
		{
			size, err := m.UserProfile.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintBili(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x72
	}
	if m.Uid != 0 {
		i = encodeVarintBili(dAtA, i, uint64(m.Uid))
		i--
		dAtA[i] = 0x68
	}
	if len(m.DynamicIdStr) > 0 {
		i -= len(m.DynamicIdStr)
		copy(dAtA[i:], m.DynamicIdStr)
		i = encodeVarintBili(dAtA, i, uint64(len(m.DynamicIdStr)))
		i--
		dAtA[i] = 0x62
	}
	if len(m.Bvid) > 0 {
		i -= len(m.Bvid)
		copy(dAtA[i:], m.Bvid)
		i = encodeVarintBili(dAtA, i, uint64(len(m.Bvid)))
		i--
		dAtA[i] = 0x5a
	}
	if m.Type != 0 {
		i = encodeVarintBili(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x50
	}
	if m.Timestamp != 0 {
		i = encodeVarintBili(dAtA, i, uint64(m.Timestamp))
		i--
		dAtA[i] = 0x48
	}
	if m.Repost != 0 {
		i = encodeVarintBili(dAtA, i, uint64(m.Repost))
		i--
		dAtA[i] = 0x40
	}
	if m.View != 0 {
		i = encodeVarintBili(dAtA, i, uint64(m.View))
		i--
		dAtA[i] = 0x38
	}
	if m.Like != 0 {
		i = encodeVarintBili(dAtA, i, uint64(m.Like))
		i--
		dAtA[i] = 0x30
	}
	if m.Comment != 0 {
		i = encodeVarintBili(dAtA, i, uint64(m.Comment))
		i--
		dAtA[i] = 0x28
	}
	if m.PreDyId != 0 {
		i = encodeVarintBili(dAtA, i, uint64(m.PreDyId))
		i--
		dAtA[i] = 0x20
	}
	if m.OrigType != 0 {
		i = encodeVarintBili(dAtA, i, uint64(m.OrigType))
		i--
		dAtA[i] = 0x18
	}
	if m.OrigDyId != 0 {
		i = encodeVarintBili(dAtA, i, uint64(m.OrigDyId))
		i--
		dAtA[i] = 0x10
	}
	if m.DynamicId != 0 {
		i = encodeVarintBili(dAtA, i, uint64(m.DynamicId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Card_Desc_UserProfile) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Card_Desc_UserProfile) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Card_Desc_UserProfile) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Info != nil {
		{
			size, err := m.Info.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintBili(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Card_Desc_UserProfile_Info) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Card_Desc_UserProfile_Info) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Card_Desc_UserProfile_Info) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Uname) > 0 {
		i -= len(m.Uname)
		copy(dAtA[i:], m.Uname)
		i = encodeVarintBili(dAtA, i, uint64(len(m.Uname)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Card_Extra) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Card_Extra) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Card_Extra) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.IsSpaceTop != 0 {
		i = encodeVarintBili(dAtA, i, uint64(m.IsSpaceTop))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Card_Display) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Card_Display) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Card_Display) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Origin != nil {
		{
			size, err := m.Origin.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintBili(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.EmojiInfo != nil {
		{
			size, err := m.EmojiInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintBili(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Card_Display_EmojiInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Card_Display_EmojiInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Card_Display_EmojiInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.EmojiDetails) > 0 {
		for iNdEx := len(m.EmojiDetails) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.EmojiDetails[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintBili(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *Card_Display_EmojiInfo_EmojiDetail) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Card_Display_EmojiInfo_EmojiDetail) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Card_Display_EmojiInfo_EmojiDetail) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Url) > 0 {
		i -= len(m.Url)
		copy(dAtA[i:], m.Url)
		i = encodeVarintBili(dAtA, i, uint64(len(m.Url)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.Text) > 0 {
		i -= len(m.Text)
		copy(dAtA[i:], m.Text)
		i = encodeVarintBili(dAtA, i, uint64(len(m.Text)))
		i--
		dAtA[i] = 0x32
	}
	if m.Type != 0 {
		i = encodeVarintBili(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x28
	}
	if m.State != 0 {
		i = encodeVarintBili(dAtA, i, uint64(m.State))
		i--
		dAtA[i] = 0x20
	}
	if m.PackageId != 0 {
		i = encodeVarintBili(dAtA, i, uint64(m.PackageId))
		i--
		dAtA[i] = 0x18
	}
	if m.Id != 0 {
		i = encodeVarintBili(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x10
	}
	if len(m.EmojiName) > 0 {
		i -= len(m.EmojiName)
		copy(dAtA[i:], m.EmojiName)
		i = encodeVarintBili(dAtA, i, uint64(len(m.EmojiName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Card_Display_Origin) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Card_Display_Origin) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Card_Display_Origin) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.EmojiInfo != nil {
		{
			size, err := m.EmojiInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintBili(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DynamicSvrSpaceHistoryResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DynamicSvrSpaceHistoryResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DynamicSvrSpaceHistoryResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Data != nil {
		{
			size, err := m.Data.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintBili(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Message) > 0 {
		i -= len(m.Message)
		copy(dAtA[i:], m.Message)
		i = encodeVarintBili(dAtA, i, uint64(len(m.Message)))
		i--
		dAtA[i] = 0x12
	}
	if m.Code != 0 {
		i = encodeVarintBili(dAtA, i, uint64(m.Code))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *DynamicSvrSpaceHistoryResponse_Data) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DynamicSvrSpaceHistoryResponse_Data) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DynamicSvrSpaceHistoryResponse_Data) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.NextOffset != 0 {
		i = encodeVarintBili(dAtA, i, uint64(m.NextOffset))
		i--
		dAtA[i] = 0x18
	}
	if m.HasMore != 0 {
		i = encodeVarintBili(dAtA, i, uint64(m.HasMore))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Cards) > 0 {
		for iNdEx := len(m.Cards) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Cards[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintBili(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *DynamicSvrDynamicNewResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DynamicSvrDynamicNewResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DynamicSvrDynamicNewResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Data != nil {
		{
			size, err := m.Data.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintBili(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Message) > 0 {
		i -= len(m.Message)
		copy(dAtA[i:], m.Message)
		i = encodeVarintBili(dAtA, i, uint64(len(m.Message)))
		i--
		dAtA[i] = 0x12
	}
	if m.Code != 0 {
		i = encodeVarintBili(dAtA, i, uint64(m.Code))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *DynamicSvrDynamicNewResponse_Data) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DynamicSvrDynamicNewResponse_Data) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DynamicSvrDynamicNewResponse_Data) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.HistoryOffset != 0 {
		i = encodeVarintBili(dAtA, i, uint64(m.HistoryOffset))
		i--
		dAtA[i] = 0x38
	}
	if m.MaxDynamicId != 0 {
		i = encodeVarintBili(dAtA, i, uint64(m.MaxDynamicId))
		i--
		dAtA[i] = 0x30
	}
	if len(m.Cards) > 0 {
		for iNdEx := len(m.Cards) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Cards[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintBili(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	if m.OpenRcmd != 0 {
		i = encodeVarintBili(dAtA, i, uint64(m.OpenRcmd))
		i--
		dAtA[i] = 0x20
	}
	if m.UpdateNum != 0 {
		i = encodeVarintBili(dAtA, i, uint64(m.UpdateNum))
		i--
		dAtA[i] = 0x18
	}
	if m.ExistGap != 0 {
		i = encodeVarintBili(dAtA, i, uint64(m.ExistGap))
		i--
		dAtA[i] = 0x10
	}
	if m.NewNum != 0 {
		i = encodeVarintBili(dAtA, i, uint64(m.NewNum))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *RelationModifyResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RelationModifyResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RelationModifyResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Ttl != 0 {
		i = encodeVarintBili(dAtA, i, uint64(m.Ttl))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Message) > 0 {
		i -= len(m.Message)
		copy(dAtA[i:], m.Message)
		i = encodeVarintBili(dAtA, i, uint64(len(m.Message)))
		i--
		dAtA[i] = 0x12
	}
	if m.Code != 0 {
		i = encodeVarintBili(dAtA, i, uint64(m.Code))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetAttentionListResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetAttentionListResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetAttentionListResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Data != nil {
		{
			size, err := m.Data.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintBili(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Message) > 0 {
		i -= len(m.Message)
		copy(dAtA[i:], m.Message)
		i = encodeVarintBili(dAtA, i, uint64(len(m.Message)))
		i--
		dAtA[i] = 0x12
	}
	if m.Code != 0 {
		i = encodeVarintBili(dAtA, i, uint64(m.Code))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetAttentionListResponse_Data) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetAttentionListResponse_Data) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetAttentionListResponse_Data) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.List) > 0 {
		dAtA19 := make([]byte, len(m.List)*10)
		var j18 int
		for _, num1 := range m.List {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA19[j18] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j18++
			}
			dAtA19[j18] = uint8(num)
			j18++
		}
		i -= j18
		copy(dAtA[i:], dAtA19[:j18])
		i = encodeVarintBili(dAtA, i, uint64(j18))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CardWithImage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CardWithImage) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CardWithImage) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Item != nil {
		{
			size, err := m.Item.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintBili(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CardWithImage_Item) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CardWithImage_Item) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CardWithImage_Item) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.UploadTime != 0 {
		i = encodeVarintBili(dAtA, i, uint64(m.UploadTime))
		i--
		dAtA[i] = 0x38
	}
	if m.PicturesCount != 0 {
		i = encodeVarintBili(dAtA, i, uint64(m.PicturesCount))
		i--
		dAtA[i] = 0x30
	}
	if len(m.Pictures) > 0 {
		for iNdEx := len(m.Pictures) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Pictures[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintBili(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	if len(m.Category) > 0 {
		i -= len(m.Category)
		copy(dAtA[i:], m.Category)
		i = encodeVarintBili(dAtA, i, uint64(len(m.Category)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintBili(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Title) > 0 {
		i -= len(m.Title)
		copy(dAtA[i:], m.Title)
		i = encodeVarintBili(dAtA, i, uint64(len(m.Title)))
		i--
		dAtA[i] = 0x12
	}
	if m.Id != 0 {
		i = encodeVarintBili(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *CardWithImage_Item_Picture) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CardWithImage_Item_Picture) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CardWithImage_Item_Picture) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.ImgSize != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.ImgSize))))
		i--
		dAtA[i] = 0x25
	}
	if m.ImgHeight != 0 {
		i = encodeVarintBili(dAtA, i, uint64(m.ImgHeight))
		i--
		dAtA[i] = 0x18
	}
	if m.ImgWidth != 0 {
		i = encodeVarintBili(dAtA, i, uint64(m.ImgWidth))
		i--
		dAtA[i] = 0x10
	}
	if len(m.ImgSrc) > 0 {
		i -= len(m.ImgSrc)
		copy(dAtA[i:], m.ImgSrc)
		i = encodeVarintBili(dAtA, i, uint64(len(m.ImgSrc)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CardWithOrig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CardWithOrig) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CardWithOrig) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.OriginUser != nil {
		{
			size, err := m.OriginUser.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintBili(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Origin) > 0 {
		i -= len(m.Origin)
		copy(dAtA[i:], m.Origin)
		i = encodeVarintBili(dAtA, i, uint64(len(m.Origin)))
		i--
		dAtA[i] = 0x12
	}
	if m.Item != nil {
		{
			size, err := m.Item.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintBili(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CardWithOrig_Item) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CardWithOrig_Item) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CardWithOrig_Item) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Tips) > 0 {
		i -= len(m.Tips)
		copy(dAtA[i:], m.Tips)
		i = encodeVarintBili(dAtA, i, uint64(len(m.Tips)))
		i--
		dAtA[i] = 0x32
	}
	if m.Miss != 0 {
		i = encodeVarintBili(dAtA, i, uint64(m.Miss))
		i--
		dAtA[i] = 0x28
	}
	if m.Reply != 0 {
		i = encodeVarintBili(dAtA, i, uint64(m.Reply))
		i--
		dAtA[i] = 0x20
	}
	if m.OrigType != 0 {
		i = encodeVarintBili(dAtA, i, uint64(m.OrigType))
		i--
		dAtA[i] = 0x18
	}
	if m.Timestamp != 0 {
		i = encodeVarintBili(dAtA, i, uint64(m.Timestamp))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Content) > 0 {
		i -= len(m.Content)
		copy(dAtA[i:], m.Content)
		i = encodeVarintBili(dAtA, i, uint64(len(m.Content)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CardWithOrig_OriginUser) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CardWithOrig_OriginUser) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CardWithOrig_OriginUser) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Info != nil {
		{
			size, err := m.Info.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintBili(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CardWithOrig_OriginUser_Info) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CardWithOrig_OriginUser_Info) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CardWithOrig_OriginUser_Info) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Uname) > 0 {
		i -= len(m.Uname)
		copy(dAtA[i:], m.Uname)
		i = encodeVarintBili(dAtA, i, uint64(len(m.Uname)))
		i--
		dAtA[i] = 0x12
	}
	if m.Uid != 0 {
		i = encodeVarintBili(dAtA, i, uint64(m.Uid))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *CardWithVideo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CardWithVideo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CardWithVideo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Pic) > 0 {
		i -= len(m.Pic)
		copy(dAtA[i:], m.Pic)
		i = encodeVarintBili(dAtA, i, uint64(len(m.Pic)))
		i--
		dAtA[i] = 0x42
	}
	if m.Videos != 0 {
		i = encodeVarintBili(dAtA, i, uint64(m.Videos))
		i--
		dAtA[i] = 0x38
	}
	if len(m.Tname) > 0 {
		i -= len(m.Tname)
		copy(dAtA[i:], m.Tname)
		i = encodeVarintBili(dAtA, i, uint64(len(m.Tname)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Title) > 0 {
		i -= len(m.Title)
		copy(dAtA[i:], m.Title)
		i = encodeVarintBili(dAtA, i, uint64(len(m.Title)))
		i--
		dAtA[i] = 0x2a
	}
	if m.Pubdate != 0 {
		i = encodeVarintBili(dAtA, i, uint64(m.Pubdate))
		i--
		dAtA[i] = 0x20
	}
	if len(m.Dynamic) > 0 {
		i -= len(m.Dynamic)
		copy(dAtA[i:], m.Dynamic)
		i = encodeVarintBili(dAtA, i, uint64(len(m.Dynamic)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Duration != 0 {
		i = encodeVarintBili(dAtA, i, uint64(m.Duration))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Desc) > 0 {
		i -= len(m.Desc)
		copy(dAtA[i:], m.Desc)
		i = encodeVarintBili(dAtA, i, uint64(len(m.Desc)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CardTextOnly) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CardTextOnly) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CardTextOnly) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Item != nil {
		{
			size, err := m.Item.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintBili(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CardTextOnly_Item) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CardTextOnly_Item) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CardTextOnly_Item) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Reply != 0 {
		i = encodeVarintBili(dAtA, i, uint64(m.Reply))
		i--
		dAtA[i] = 0x40
	}
	if m.Timestamp != 0 {
		i = encodeVarintBili(dAtA, i, uint64(m.Timestamp))
		i--
		dAtA[i] = 0x38
	}
	if len(m.Ctrl) > 0 {
		i -= len(m.Ctrl)
		copy(dAtA[i:], m.Ctrl)
		i = encodeVarintBili(dAtA, i, uint64(len(m.Ctrl)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Content) > 0 {
		i -= len(m.Content)
		copy(dAtA[i:], m.Content)
		i = encodeVarintBili(dAtA, i, uint64(len(m.Content)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Uid != 0 {
		i = encodeVarintBili(dAtA, i, uint64(m.Uid))
		i--
		dAtA[i] = 0x10
	}
	if m.RpId != 0 {
		i = encodeVarintBili(dAtA, i, uint64(m.RpId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *CardWithPost) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CardWithPost) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CardWithPost) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.PublishTime != 0 {
		i = encodeVarintBili(dAtA, i, uint64(m.PublishTime))
		i--
		dAtA[i] = 0x28
	}
	if len(m.BannerUrl) > 0 {
		i -= len(m.BannerUrl)
		copy(dAtA[i:], m.BannerUrl)
		i = encodeVarintBili(dAtA, i, uint64(len(m.BannerUrl)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.ImageUrls) > 0 {
		for iNdEx := len(m.ImageUrls) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.ImageUrls[iNdEx])
			copy(dAtA[i:], m.ImageUrls[iNdEx])
			i = encodeVarintBili(dAtA, i, uint64(len(m.ImageUrls[iNdEx])))
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Summary) > 0 {
		i -= len(m.Summary)
		copy(dAtA[i:], m.Summary)
		i = encodeVarintBili(dAtA, i, uint64(len(m.Summary)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Title) > 0 {
		i -= len(m.Title)
		copy(dAtA[i:], m.Title)
		i = encodeVarintBili(dAtA, i, uint64(len(m.Title)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CardWithMusic) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CardWithMusic) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CardWithMusic) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	return len(dAtA) - i, nil
}

func (m *CardWithAnime) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CardWithAnime) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CardWithAnime) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Url) > 0 {
		i -= len(m.Url)
		copy(dAtA[i:], m.Url)
		i = encodeVarintBili(dAtA, i, uint64(len(m.Url)))
		i--
		dAtA[i] = 0x5a
	}
	if m.ReplyCount != 0 {
		i = encodeVarintBili(dAtA, i, uint64(m.ReplyCount))
		i--
		dAtA[i] = 0x50
	}
	if m.PlayCount != 0 {
		i = encodeVarintBili(dAtA, i, uint64(m.PlayCount))
		i--
		dAtA[i] = 0x48
	}
	if len(m.NewDesc) > 0 {
		i -= len(m.NewDesc)
		copy(dAtA[i:], m.NewDesc)
		i = encodeVarintBili(dAtA, i, uint64(len(m.NewDesc)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.IndexTitle) > 0 {
		i -= len(m.IndexTitle)
		copy(dAtA[i:], m.IndexTitle)
		i = encodeVarintBili(dAtA, i, uint64(len(m.IndexTitle)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Index) > 0 {
		i -= len(m.Index)
		copy(dAtA[i:], m.Index)
		i = encodeVarintBili(dAtA, i, uint64(len(m.Index)))
		i--
		dAtA[i] = 0x2a
	}
	if m.EpisodeId != 0 {
		i = encodeVarintBili(dAtA, i, uint64(m.EpisodeId))
		i--
		dAtA[i] = 0x20
	}
	if len(m.Cover) > 0 {
		i -= len(m.Cover)
		copy(dAtA[i:], m.Cover)
		i = encodeVarintBili(dAtA, i, uint64(len(m.Cover)))
		i--
		dAtA[i] = 0x1a
	}
	if m.BulletCount != 0 {
		i = encodeVarintBili(dAtA, i, uint64(m.BulletCount))
		i--
		dAtA[i] = 0x10
	}
	if m.ApiSeasonInfo != nil {
		{
			size, err := m.ApiSeasonInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintBili(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CardWithAnime_ApiSeasonInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CardWithAnime_ApiSeasonInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CardWithAnime_ApiSeasonInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.TypeName) > 0 {
		i -= len(m.TypeName)
		copy(dAtA[i:], m.TypeName)
		i = encodeVarintBili(dAtA, i, uint64(len(m.TypeName)))
		i--
		dAtA[i] = 0x42
	}
	if m.Ts != 0 {
		i = encodeVarintBili(dAtA, i, uint64(m.Ts))
		i--
		dAtA[i] = 0x38
	}
	if m.TotalCount != 0 {
		i = encodeVarintBili(dAtA, i, uint64(m.TotalCount))
		i--
		dAtA[i] = 0x30
	}
	if len(m.Title) > 0 {
		i -= len(m.Title)
		copy(dAtA[i:], m.Title)
		i = encodeVarintBili(dAtA, i, uint64(len(m.Title)))
		i--
		dAtA[i] = 0x2a
	}
	if m.SeasonId != 0 {
		i = encodeVarintBili(dAtA, i, uint64(m.SeasonId))
		i--
		dAtA[i] = 0x20
	}
	if m.IsFinish != 0 {
		i = encodeVarintBili(dAtA, i, uint64(m.IsFinish))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Cover) > 0 {
		i -= len(m.Cover)
		copy(dAtA[i:], m.Cover)
		i = encodeVarintBili(dAtA, i, uint64(len(m.Cover)))
		i--
		dAtA[i] = 0x12
	}
	if m.BgmType != 0 {
		i = encodeVarintBili(dAtA, i, uint64(m.BgmType))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *CardWithSketch) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CardWithSketch) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CardWithSketch) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Sketch != nil {
		{
			size, err := m.Sketch.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintBili(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Vest != nil {
		{
			size, err := m.Vest.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintBili(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CardWithSketch_Vest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CardWithSketch_Vest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CardWithSketch_Vest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Content) > 0 {
		i -= len(m.Content)
		copy(dAtA[i:], m.Content)
		i = encodeVarintBili(dAtA, i, uint64(len(m.Content)))
		i--
		dAtA[i] = 0x12
	}
	if m.Uid != 0 {
		i = encodeVarintBili(dAtA, i, uint64(m.Uid))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *CardWithSketch_Sketch) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CardWithSketch_Sketch) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CardWithSketch_Sketch) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.DescText) > 0 {
		i -= len(m.DescText)
		copy(dAtA[i:], m.DescText)
		i = encodeVarintBili(dAtA, i, uint64(len(m.DescText)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Title) > 0 {
		i -= len(m.Title)
		copy(dAtA[i:], m.Title)
		i = encodeVarintBili(dAtA, i, uint64(len(m.Title)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CardWithLive) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CardWithLive) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CardWithLive) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.RoundStatus != 0 {
		i = encodeVarintBili(dAtA, i, uint64(m.RoundStatus))
		i--
		dAtA[i] = 0x40
	}
	if m.LiveStatus != 0 {
		i = encodeVarintBili(dAtA, i, uint64(m.LiveStatus))
		i--
		dAtA[i] = 0x38
	}
	if len(m.AreaV2Name) > 0 {
		i -= len(m.AreaV2Name)
		copy(dAtA[i:], m.AreaV2Name)
		i = encodeVarintBili(dAtA, i, uint64(len(m.AreaV2Name)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Title) > 0 {
		i -= len(m.Title)
		copy(dAtA[i:], m.Title)
		i = encodeVarintBili(dAtA, i, uint64(len(m.Title)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Cover) > 0 {
		i -= len(m.Cover)
		copy(dAtA[i:], m.Cover)
		i = encodeVarintBili(dAtA, i, uint64(len(m.Cover)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Uname) > 0 {
		i -= len(m.Uname)
		copy(dAtA[i:], m.Uname)
		i = encodeVarintBili(dAtA, i, uint64(len(m.Uname)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Uid != 0 {
		i = encodeVarintBili(dAtA, i, uint64(m.Uid))
		i--
		dAtA[i] = 0x10
	}
	if m.Roomid != 0 {
		i = encodeVarintBili(dAtA, i, uint64(m.Roomid))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *CardWithLiveV2) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CardWithLiveV2) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CardWithLiveV2) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Type != 0 {
		i = encodeVarintBili(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x18
	}
	if m.Style != 0 {
		i = encodeVarintBili(dAtA, i, uint64(m.Style))
		i--
		dAtA[i] = 0x10
	}
	if m.LivePlayInfo != nil {
		{
			size, err := m.LivePlayInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintBili(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CardWithLiveV2_LivePlayInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CardWithLiveV2_LivePlayInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CardWithLiveV2_LivePlayInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.RoomType != 0 {
		i = encodeVarintBili(dAtA, i, uint64(m.RoomType))
		i--
		dAtA[i] = 0x60
	}
	if len(m.ParentAreaName) > 0 {
		i -= len(m.ParentAreaName)
		copy(dAtA[i:], m.ParentAreaName)
		i = encodeVarintBili(dAtA, i, uint64(len(m.ParentAreaName)))
		i--
		dAtA[i] = 0x5a
	}
	if m.ParentAreaId != 0 {
		i = encodeVarintBili(dAtA, i, uint64(m.ParentAreaId))
		i--
		dAtA[i] = 0x50
	}
	if len(m.AreaName) > 0 {
		i -= len(m.AreaName)
		copy(dAtA[i:], m.AreaName)
		i = encodeVarintBili(dAtA, i, uint64(len(m.AreaName)))
		i--
		dAtA[i] = 0x4a
	}
	if m.AreaId != 0 {
		i = encodeVarintBili(dAtA, i, uint64(m.AreaId))
		i--
		dAtA[i] = 0x40
	}
	if m.LiveId != 0 {
		i = encodeVarintBili(dAtA, i, uint64(m.LiveId))
		i--
		dAtA[i] = 0x38
	}
	if m.Uid != 0 {
		i = encodeVarintBili(dAtA, i, uint64(m.Uid))
		i--
		dAtA[i] = 0x30
	}
	if len(m.Link) > 0 {
		i -= len(m.Link)
		copy(dAtA[i:], m.Link)
		i = encodeVarintBili(dAtA, i, uint64(len(m.Link)))
		i--
		dAtA[i] = 0x2a
	}
	if m.LiveStatus != 0 {
		i = encodeVarintBili(dAtA, i, uint64(m.LiveStatus))
		i--
		dAtA[i] = 0x20
	}
	if m.RoomId != 0 {
		i = encodeVarintBili(dAtA, i, uint64(m.RoomId))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Title) > 0 {
		i -= len(m.Title)
		copy(dAtA[i:], m.Title)
		i = encodeVarintBili(dAtA, i, uint64(len(m.Title)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Cover) > 0 {
		i -= len(m.Cover)
		copy(dAtA[i:], m.Cover)
		i = encodeVarintBili(dAtA, i, uint64(len(m.Cover)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintBili(dAtA []byte, offset int, v uint64) int {
	offset -= sovBili(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Sliver2CoinsStatusResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovBili(uint64(m.Code))
	}
	l = len(m.Msg)
	if l > 0 {
		n += 1 + l + sovBili(uint64(l))
	}
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovBili(uint64(l))
	}
	if m.Data != nil {
		l = m.Data.Size()
		n += 1 + l + sovBili(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Sliver2CoinsStatusResponse_Data) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Silver != 0 {
		n += 1 + sovBili(uint64(m.Silver))
	}
	if m.Coin != 0 {
		n += 1 + sovBili(uint64(m.Coin))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *BaseResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovBili(uint64(m.Code))
	}
	l = len(m.Msg)
	if l > 0 {
		n += 1 + l + sovBili(uint64(l))
	}
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovBili(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *RoomInitResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovBili(uint64(m.Code))
	}
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovBili(uint64(l))
	}
	if m.Data != nil {
		l = m.Data.Size()
		n += 1 + l + sovBili(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *RoomInitResponse_Data) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RoomId != 0 {
		n += 1 + sovBili(uint64(m.RoomId))
	}
	if m.ShortId != 0 {
		n += 1 + sovBili(uint64(m.ShortId))
	}
	if m.Uid != 0 {
		n += 1 + sovBili(uint64(m.Uid))
	}
	if m.IsHidden {
		n += 2
	}
	if m.IsLocked {
		n += 2
	}
	if m.LiveStatus != 0 {
		n += 1 + sovBili(uint64(m.LiveStatus))
	}
	if m.IsSp != 0 {
		n += 1 + sovBili(uint64(m.IsSp))
	}
	if m.SpecialType != 0 {
		n += 2 + sovBili(uint64(m.SpecialType))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *XSpaceAccInfoResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovBili(uint64(m.Code))
	}
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovBili(uint64(l))
	}
	if m.Data != nil {
		l = m.Data.Size()
		n += 1 + l + sovBili(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *XSpaceAccInfoResponse_Data) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Mid != 0 {
		n += 1 + sovBili(uint64(m.Mid))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovBili(uint64(l))
	}
	if m.Level != 0 {
		n += 1 + sovBili(uint64(m.Level))
	}
	if m.LiveRoom != nil {
		l = m.LiveRoom.Size()
		n += 2 + l + sovBili(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *XSpaceAccInfoResponse_Data_LiveRoom) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RoomStatus != 0 {
		n += 1 + sovBili(uint64(m.RoomStatus))
	}
	if m.LiveStatus != 0 {
		n += 1 + sovBili(uint64(m.LiveStatus))
	}
	l = len(m.Url)
	if l > 0 {
		n += 1 + l + sovBili(uint64(l))
	}
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovBili(uint64(l))
	}
	l = len(m.Cover)
	if l > 0 {
		n += 1 + l + sovBili(uint64(l))
	}
	if m.Roomid != 0 {
		n += 1 + sovBili(uint64(m.Roomid))
	}
	if m.RoundStatus != 0 {
		n += 1 + sovBili(uint64(m.RoundStatus))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetRoomInfoOldResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovBili(uint64(m.Code))
	}
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovBili(uint64(l))
	}
	if m.Data != nil {
		l = m.Data.Size()
		n += 1 + l + sovBili(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetRoomInfoOldResponse_Data) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RoomStatus != 0 {
		n += 1 + sovBili(uint64(m.RoomStatus))
	}
	if m.RoundStatus != 0 {
		n += 1 + sovBili(uint64(m.RoundStatus))
	}
	if m.LiveStatus != 0 {
		n += 1 + sovBili(uint64(m.LiveStatus))
	}
	l = len(m.Url)
	if l > 0 {
		n += 1 + l + sovBili(uint64(l))
	}
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovBili(uint64(l))
	}
	l = len(m.Cover)
	if l > 0 {
		n += 1 + l + sovBili(uint64(l))
	}
	if m.Online != 0 {
		n += 1 + sovBili(uint64(m.Online))
	}
	if m.Roomid != 0 {
		n += 1 + sovBili(uint64(m.Roomid))
	}
	if m.BroadcastType != 0 {
		n += 1 + sovBili(uint64(m.BroadcastType))
	}
	if m.OnlineHidden != 0 {
		n += 1 + sovBili(uint64(m.OnlineHidden))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *FeedListResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovBili(uint64(m.Code))
	}
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovBili(uint64(l))
	}
	if m.Data != nil {
		l = m.Data.Size()
		n += 1 + l + sovBili(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *FeedListResponse_Data) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Result != 0 {
		n += 1 + sovBili(uint64(m.Result))
	}
	l = len(m.Page)
	if l > 0 {
		n += 1 + l + sovBili(uint64(l))
	}
	l = len(m.Pagesize)
	if l > 0 {
		n += 1 + l + sovBili(uint64(l))
	}
	if len(m.List) > 0 {
		for _, e := range m.List {
			l = e.Size()
			n += 1 + l + sovBili(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *FeedListResponse_Data_ListInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Cover)
	if l > 0 {
		n += 1 + l + sovBili(uint64(l))
	}
	l = len(m.Face)
	if l > 0 {
		n += 1 + l + sovBili(uint64(l))
	}
	l = len(m.Uname)
	if l > 0 {
		n += 1 + l + sovBili(uint64(l))
	}
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovBili(uint64(l))
	}
	if m.Roomid != 0 {
		n += 1 + sovBili(uint64(m.Roomid))
	}
	l = len(m.Pic)
	if l > 0 {
		n += 1 + l + sovBili(uint64(l))
	}
	if m.Online != 0 {
		n += 1 + sovBili(uint64(m.Online))
	}
	l = len(m.Link)
	if l > 0 {
		n += 1 + l + sovBili(uint64(l))
	}
	if m.Uid != 0 {
		n += 1 + sovBili(uint64(m.Uid))
	}
	if m.ParentAreaId != 0 {
		n += 1 + sovBili(uint64(m.ParentAreaId))
	}
	if m.AreaId != 0 {
		n += 1 + sovBili(uint64(m.AreaId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Card) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Card)
	if l > 0 {
		n += 1 + l + sovBili(uint64(l))
	}
	if m.Desc != nil {
		l = m.Desc.Size()
		n += 1 + l + sovBili(uint64(l))
	}
	if m.Extra != nil {
		l = m.Extra.Size()
		n += 1 + l + sovBili(uint64(l))
	}
	if m.Display != nil {
		l = m.Display.Size()
		n += 1 + l + sovBili(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Card_Desc) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DynamicId != 0 {
		n += 1 + sovBili(uint64(m.DynamicId))
	}
	if m.OrigDyId != 0 {
		n += 1 + sovBili(uint64(m.OrigDyId))
	}
	if m.OrigType != 0 {
		n += 1 + sovBili(uint64(m.OrigType))
	}
	if m.PreDyId != 0 {
		n += 1 + sovBili(uint64(m.PreDyId))
	}
	if m.Comment != 0 {
		n += 1 + sovBili(uint64(m.Comment))
	}
	if m.Like != 0 {
		n += 1 + sovBili(uint64(m.Like))
	}
	if m.View != 0 {
		n += 1 + sovBili(uint64(m.View))
	}
	if m.Repost != 0 {
		n += 1 + sovBili(uint64(m.Repost))
	}
	if m.Timestamp != 0 {
		n += 1 + sovBili(uint64(m.Timestamp))
	}
	if m.Type != 0 {
		n += 1 + sovBili(uint64(m.Type))
	}
	l = len(m.Bvid)
	if l > 0 {
		n += 1 + l + sovBili(uint64(l))
	}
	l = len(m.DynamicIdStr)
	if l > 0 {
		n += 1 + l + sovBili(uint64(l))
	}
	if m.Uid != 0 {
		n += 1 + sovBili(uint64(m.Uid))
	}
	if m.UserProfile != nil {
		l = m.UserProfile.Size()
		n += 1 + l + sovBili(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Card_Desc_UserProfile) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Info != nil {
		l = m.Info.Size()
		n += 1 + l + sovBili(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Card_Desc_UserProfile_Info) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Uname)
	if l > 0 {
		n += 1 + l + sovBili(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Card_Extra) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.IsSpaceTop != 0 {
		n += 1 + sovBili(uint64(m.IsSpaceTop))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Card_Display) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.EmojiInfo != nil {
		l = m.EmojiInfo.Size()
		n += 1 + l + sovBili(uint64(l))
	}
	if m.Origin != nil {
		l = m.Origin.Size()
		n += 1 + l + sovBili(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Card_Display_EmojiInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.EmojiDetails) > 0 {
		for _, e := range m.EmojiDetails {
			l = e.Size()
			n += 1 + l + sovBili(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Card_Display_EmojiInfo_EmojiDetail) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.EmojiName)
	if l > 0 {
		n += 1 + l + sovBili(uint64(l))
	}
	if m.Id != 0 {
		n += 1 + sovBili(uint64(m.Id))
	}
	if m.PackageId != 0 {
		n += 1 + sovBili(uint64(m.PackageId))
	}
	if m.State != 0 {
		n += 1 + sovBili(uint64(m.State))
	}
	if m.Type != 0 {
		n += 1 + sovBili(uint64(m.Type))
	}
	l = len(m.Text)
	if l > 0 {
		n += 1 + l + sovBili(uint64(l))
	}
	l = len(m.Url)
	if l > 0 {
		n += 1 + l + sovBili(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Card_Display_Origin) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.EmojiInfo != nil {
		l = m.EmojiInfo.Size()
		n += 1 + l + sovBili(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DynamicSvrSpaceHistoryResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovBili(uint64(m.Code))
	}
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovBili(uint64(l))
	}
	if m.Data != nil {
		l = m.Data.Size()
		n += 1 + l + sovBili(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DynamicSvrSpaceHistoryResponse_Data) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Cards) > 0 {
		for _, e := range m.Cards {
			l = e.Size()
			n += 1 + l + sovBili(uint64(l))
		}
	}
	if m.HasMore != 0 {
		n += 1 + sovBili(uint64(m.HasMore))
	}
	if m.NextOffset != 0 {
		n += 1 + sovBili(uint64(m.NextOffset))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DynamicSvrDynamicNewResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovBili(uint64(m.Code))
	}
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovBili(uint64(l))
	}
	if m.Data != nil {
		l = m.Data.Size()
		n += 1 + l + sovBili(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DynamicSvrDynamicNewResponse_Data) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NewNum != 0 {
		n += 1 + sovBili(uint64(m.NewNum))
	}
	if m.ExistGap != 0 {
		n += 1 + sovBili(uint64(m.ExistGap))
	}
	if m.UpdateNum != 0 {
		n += 1 + sovBili(uint64(m.UpdateNum))
	}
	if m.OpenRcmd != 0 {
		n += 1 + sovBili(uint64(m.OpenRcmd))
	}
	if len(m.Cards) > 0 {
		for _, e := range m.Cards {
			l = e.Size()
			n += 1 + l + sovBili(uint64(l))
		}
	}
	if m.MaxDynamicId != 0 {
		n += 1 + sovBili(uint64(m.MaxDynamicId))
	}
	if m.HistoryOffset != 0 {
		n += 1 + sovBili(uint64(m.HistoryOffset))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *RelationModifyResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovBili(uint64(m.Code))
	}
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovBili(uint64(l))
	}
	if m.Ttl != 0 {
		n += 1 + sovBili(uint64(m.Ttl))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetAttentionListResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovBili(uint64(m.Code))
	}
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovBili(uint64(l))
	}
	if m.Data != nil {
		l = m.Data.Size()
		n += 1 + l + sovBili(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetAttentionListResponse_Data) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.List) > 0 {
		l = 0
		for _, e := range m.List {
			l += sovBili(uint64(e))
		}
		n += 1 + sovBili(uint64(l)) + l
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CardWithImage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Item != nil {
		l = m.Item.Size()
		n += 1 + l + sovBili(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CardWithImage_Item) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovBili(uint64(m.Id))
	}
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovBili(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovBili(uint64(l))
	}
	l = len(m.Category)
	if l > 0 {
		n += 1 + l + sovBili(uint64(l))
	}
	if len(m.Pictures) > 0 {
		for _, e := range m.Pictures {
			l = e.Size()
			n += 1 + l + sovBili(uint64(l))
		}
	}
	if m.PicturesCount != 0 {
		n += 1 + sovBili(uint64(m.PicturesCount))
	}
	if m.UploadTime != 0 {
		n += 1 + sovBili(uint64(m.UploadTime))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CardWithImage_Item_Picture) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ImgSrc)
	if l > 0 {
		n += 1 + l + sovBili(uint64(l))
	}
	if m.ImgWidth != 0 {
		n += 1 + sovBili(uint64(m.ImgWidth))
	}
	if m.ImgHeight != 0 {
		n += 1 + sovBili(uint64(m.ImgHeight))
	}
	if m.ImgSize != 0 {
		n += 5
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CardWithOrig) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Item != nil {
		l = m.Item.Size()
		n += 1 + l + sovBili(uint64(l))
	}
	l = len(m.Origin)
	if l > 0 {
		n += 1 + l + sovBili(uint64(l))
	}
	if m.OriginUser != nil {
		l = m.OriginUser.Size()
		n += 1 + l + sovBili(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CardWithOrig_Item) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Content)
	if l > 0 {
		n += 1 + l + sovBili(uint64(l))
	}
	if m.Timestamp != 0 {
		n += 1 + sovBili(uint64(m.Timestamp))
	}
	if m.OrigType != 0 {
		n += 1 + sovBili(uint64(m.OrigType))
	}
	if m.Reply != 0 {
		n += 1 + sovBili(uint64(m.Reply))
	}
	if m.Miss != 0 {
		n += 1 + sovBili(uint64(m.Miss))
	}
	l = len(m.Tips)
	if l > 0 {
		n += 1 + l + sovBili(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CardWithOrig_OriginUser) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Info != nil {
		l = m.Info.Size()
		n += 1 + l + sovBili(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CardWithOrig_OriginUser_Info) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Uid != 0 {
		n += 1 + sovBili(uint64(m.Uid))
	}
	l = len(m.Uname)
	if l > 0 {
		n += 1 + l + sovBili(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CardWithVideo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Desc)
	if l > 0 {
		n += 1 + l + sovBili(uint64(l))
	}
	if m.Duration != 0 {
		n += 1 + sovBili(uint64(m.Duration))
	}
	l = len(m.Dynamic)
	if l > 0 {
		n += 1 + l + sovBili(uint64(l))
	}
	if m.Pubdate != 0 {
		n += 1 + sovBili(uint64(m.Pubdate))
	}
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovBili(uint64(l))
	}
	l = len(m.Tname)
	if l > 0 {
		n += 1 + l + sovBili(uint64(l))
	}
	if m.Videos != 0 {
		n += 1 + sovBili(uint64(m.Videos))
	}
	l = len(m.Pic)
	if l > 0 {
		n += 1 + l + sovBili(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CardTextOnly) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Item != nil {
		l = m.Item.Size()
		n += 1 + l + sovBili(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CardTextOnly_Item) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RpId != 0 {
		n += 1 + sovBili(uint64(m.RpId))
	}
	if m.Uid != 0 {
		n += 1 + sovBili(uint64(m.Uid))
	}
	l = len(m.Content)
	if l > 0 {
		n += 1 + l + sovBili(uint64(l))
	}
	l = len(m.Ctrl)
	if l > 0 {
		n += 1 + l + sovBili(uint64(l))
	}
	if m.Timestamp != 0 {
		n += 1 + sovBili(uint64(m.Timestamp))
	}
	if m.Reply != 0 {
		n += 1 + sovBili(uint64(m.Reply))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CardWithPost) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovBili(uint64(l))
	}
	l = len(m.Summary)
	if l > 0 {
		n += 1 + l + sovBili(uint64(l))
	}
	if len(m.ImageUrls) > 0 {
		for _, s := range m.ImageUrls {
			l = len(s)
			n += 1 + l + sovBili(uint64(l))
		}
	}
	l = len(m.BannerUrl)
	if l > 0 {
		n += 1 + l + sovBili(uint64(l))
	}
	if m.PublishTime != 0 {
		n += 1 + sovBili(uint64(m.PublishTime))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CardWithMusic) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CardWithAnime) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ApiSeasonInfo != nil {
		l = m.ApiSeasonInfo.Size()
		n += 1 + l + sovBili(uint64(l))
	}
	if m.BulletCount != 0 {
		n += 1 + sovBili(uint64(m.BulletCount))
	}
	l = len(m.Cover)
	if l > 0 {
		n += 1 + l + sovBili(uint64(l))
	}
	if m.EpisodeId != 0 {
		n += 1 + sovBili(uint64(m.EpisodeId))
	}
	l = len(m.Index)
	if l > 0 {
		n += 1 + l + sovBili(uint64(l))
	}
	l = len(m.IndexTitle)
	if l > 0 {
		n += 1 + l + sovBili(uint64(l))
	}
	l = len(m.NewDesc)
	if l > 0 {
		n += 1 + l + sovBili(uint64(l))
	}
	if m.PlayCount != 0 {
		n += 1 + sovBili(uint64(m.PlayCount))
	}
	if m.ReplyCount != 0 {
		n += 1 + sovBili(uint64(m.ReplyCount))
	}
	l = len(m.Url)
	if l > 0 {
		n += 1 + l + sovBili(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CardWithAnime_ApiSeasonInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BgmType != 0 {
		n += 1 + sovBili(uint64(m.BgmType))
	}
	l = len(m.Cover)
	if l > 0 {
		n += 1 + l + sovBili(uint64(l))
	}
	if m.IsFinish != 0 {
		n += 1 + sovBili(uint64(m.IsFinish))
	}
	if m.SeasonId != 0 {
		n += 1 + sovBili(uint64(m.SeasonId))
	}
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovBili(uint64(l))
	}
	if m.TotalCount != 0 {
		n += 1 + sovBili(uint64(m.TotalCount))
	}
	if m.Ts != 0 {
		n += 1 + sovBili(uint64(m.Ts))
	}
	l = len(m.TypeName)
	if l > 0 {
		n += 1 + l + sovBili(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CardWithSketch) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Vest != nil {
		l = m.Vest.Size()
		n += 1 + l + sovBili(uint64(l))
	}
	if m.Sketch != nil {
		l = m.Sketch.Size()
		n += 1 + l + sovBili(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CardWithSketch_Vest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Uid != 0 {
		n += 1 + sovBili(uint64(m.Uid))
	}
	l = len(m.Content)
	if l > 0 {
		n += 1 + l + sovBili(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CardWithSketch_Sketch) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovBili(uint64(l))
	}
	l = len(m.DescText)
	if l > 0 {
		n += 1 + l + sovBili(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CardWithLive) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Roomid != 0 {
		n += 1 + sovBili(uint64(m.Roomid))
	}
	if m.Uid != 0 {
		n += 1 + sovBili(uint64(m.Uid))
	}
	l = len(m.Uname)
	if l > 0 {
		n += 1 + l + sovBili(uint64(l))
	}
	l = len(m.Cover)
	if l > 0 {
		n += 1 + l + sovBili(uint64(l))
	}
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovBili(uint64(l))
	}
	l = len(m.AreaV2Name)
	if l > 0 {
		n += 1 + l + sovBili(uint64(l))
	}
	if m.LiveStatus != 0 {
		n += 1 + sovBili(uint64(m.LiveStatus))
	}
	if m.RoundStatus != 0 {
		n += 1 + sovBili(uint64(m.RoundStatus))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CardWithLiveV2) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.LivePlayInfo != nil {
		l = m.LivePlayInfo.Size()
		n += 1 + l + sovBili(uint64(l))
	}
	if m.Style != 0 {
		n += 1 + sovBili(uint64(m.Style))
	}
	if m.Type != 0 {
		n += 1 + sovBili(uint64(m.Type))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CardWithLiveV2_LivePlayInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Cover)
	if l > 0 {
		n += 1 + l + sovBili(uint64(l))
	}
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovBili(uint64(l))
	}
	if m.RoomId != 0 {
		n += 1 + sovBili(uint64(m.RoomId))
	}
	if m.LiveStatus != 0 {
		n += 1 + sovBili(uint64(m.LiveStatus))
	}
	l = len(m.Link)
	if l > 0 {
		n += 1 + l + sovBili(uint64(l))
	}
	if m.Uid != 0 {
		n += 1 + sovBili(uint64(m.Uid))
	}
	if m.LiveId != 0 {
		n += 1 + sovBili(uint64(m.LiveId))
	}
	if m.AreaId != 0 {
		n += 1 + sovBili(uint64(m.AreaId))
	}
	l = len(m.AreaName)
	if l > 0 {
		n += 1 + l + sovBili(uint64(l))
	}
	if m.ParentAreaId != 0 {
		n += 1 + sovBili(uint64(m.ParentAreaId))
	}
	l = len(m.ParentAreaName)
	if l > 0 {
		n += 1 + l + sovBili(uint64(l))
	}
	if m.RoomType != 0 {
		n += 1 + sovBili(uint64(m.RoomType))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovBili(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozBili(x uint64) (n int) {
	return sovBili(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Sliver2CoinsStatusResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBili
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Sliver2CoinsStatusResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Sliver2CoinsStatusResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBili
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Msg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBili
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBili
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBili
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Msg = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBili
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBili
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBili
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBili
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBili
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBili
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Data == nil {
				m.Data = &Sliver2CoinsStatusResponse_Data{}
			}
			if err := m.Data.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBili(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBili
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Sliver2CoinsStatusResponse_Data) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBili
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Data: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Data: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Silver", wireType)
			}
			m.Silver = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBili
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Silver |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Coin", wireType)
			}
			m.Coin = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBili
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Coin |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipBili(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBili
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BaseResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBili
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BaseResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BaseResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBili
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Msg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBili
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBili
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBili
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Msg = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBili
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBili
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBili
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBili(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBili
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RoomInitResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBili
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RoomInitResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RoomInitResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBili
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBili
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBili
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBili
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBili
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBili
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBili
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Data == nil {
				m.Data = &RoomInitResponse_Data{}
			}
			if err := m.Data.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBili(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBili
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RoomInitResponse_Data) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBili
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Data: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Data: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoomId", wireType)
			}
			m.RoomId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBili
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RoomId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShortId", wireType)
			}
			m.ShortId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBili
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ShortId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uid", wireType)
			}
			m.Uid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBili
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Uid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsHidden", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBili
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsHidden = bool(v != 0)
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsLocked", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBili
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsLocked = bool(v != 0)
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LiveStatus", wireType)
			}
			m.LiveStatus = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBili
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LiveStatus |= LiveStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsSp", wireType)
			}
			m.IsSp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBili
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IsSp |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SpecialType", wireType)
			}
			m.SpecialType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBili
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SpecialType |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipBili(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBili
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *XSpaceAccInfoResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBili
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: XSpaceAccInfoResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: XSpaceAccInfoResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBili
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBili
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBili
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBili
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBili
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBili
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBili
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Data == nil {
				m.Data = &XSpaceAccInfoResponse_Data{}
			}
			if err := m.Data.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBili(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBili
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *XSpaceAccInfoResponse_Data) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBili
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Data: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Data: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mid", wireType)
			}
			m.Mid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBili
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBili
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBili
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBili
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Level", wireType)
			}
			m.Level = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBili
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Level |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LiveRoom", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBili
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBili
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBili
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.LiveRoom == nil {
				m.LiveRoom = &XSpaceAccInfoResponse_Data_LiveRoom{}
			}
			if err := m.LiveRoom.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBili(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBili
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *XSpaceAccInfoResponse_Data_LiveRoom) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBili
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LiveRoom: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LiveRoom: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoomStatus", wireType)
			}
			m.RoomStatus = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBili
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RoomStatus |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LiveStatus", wireType)
			}
			m.LiveStatus = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBili
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LiveStatus |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Url", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBili
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBili
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBili
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Url = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBili
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBili
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBili
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cover", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBili
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBili
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBili
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Cover = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Roomid", wireType)
			}
			m.Roomid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBili
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Roomid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoundStatus", wireType)
			}
			m.RoundStatus = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBili
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RoundStatus |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipBili(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBili
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetRoomInfoOldResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBili
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetRoomInfoOldResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetRoomInfoOldResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBili
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBili
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBili
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBili
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBili
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBili
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBili
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Data == nil {
				m.Data = &GetRoomInfoOldResponse_Data{}
			}
			if err := m.Data.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBili(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBili
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetRoomInfoOldResponse_Data) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBili
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Data: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Data: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoomStatus", wireType)
			}
			m.RoomStatus = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBili
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RoomStatus |= RoomStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoundStatus", wireType)
			}
			m.RoundStatus = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBili
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RoundStatus |= RoundStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LiveStatus", wireType)
			}
			m.LiveStatus = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBili
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LiveStatus |= LiveStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Url", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBili
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBili
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBili
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Url = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBili
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBili
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBili
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cover", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBili
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBili
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBili
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Cover = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Online", wireType)
			}
			m.Online = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBili
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Online |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Roomid", wireType)
			}
			m.Roomid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBili
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Roomid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BroadcastType", wireType)
			}
			m.BroadcastType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBili
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BroadcastType |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OnlineHidden", wireType)
			}
			m.OnlineHidden = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBili
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OnlineHidden |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipBili(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBili
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FeedListResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBili
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FeedListResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FeedListResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBili
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBili
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBili
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBili
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBili
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBili
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBili
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Data == nil {
				m.Data = &FeedListResponse_Data{}
			}
			if err := m.Data.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBili(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBili
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FeedListResponse_Data) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBili
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Data: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Data: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			m.Result = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBili
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Result |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Page", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBili
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBili
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBili
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Page = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagesize", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBili
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBili
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBili
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Pagesize = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field List", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBili
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBili
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBili
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.List = append(m.List, &FeedListResponse_Data_ListInfo{})
			if err := m.List[len(m.List)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBili(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBili
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FeedListResponse_Data_ListInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBili
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cover", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBili
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBili
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBili
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Cover = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Face", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBili
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBili
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBili
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Face = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uname", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBili
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBili
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBili
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Uname = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBili
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBili
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBili
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Roomid", wireType)
			}
			m.Roomid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBili
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Roomid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pic", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBili
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBili
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBili
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Pic = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Online", wireType)
			}
			m.Online = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBili
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Online |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Link", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBili
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBili
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBili
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Link = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uid", wireType)
			}
			m.Uid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBili
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Uid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ParentAreaId", wireType)
			}
			m.ParentAreaId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBili
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ParentAreaId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AreaId", wireType)
			}
			m.AreaId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBili
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AreaId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipBili(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBili
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Card) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBili
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Card: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Card: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Card", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBili
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBili
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBili
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Card = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Desc", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBili
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBili
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBili
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Desc == nil {
				m.Desc = &Card_Desc{}
			}
			if err := m.Desc.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Extra", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBili
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBili
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBili
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Extra == nil {
				m.Extra = &Card_Extra{}
			}
			if err := m.Extra.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Display", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBili
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBili
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBili
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Display == nil {
				m.Display = &Card_Display{}
			}
			if err := m.Display.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBili(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBili
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Card_Desc) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBili
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Desc: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Desc: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DynamicId", wireType)
			}
			m.DynamicId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBili
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DynamicId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrigDyId", wireType)
			}
			m.OrigDyId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBili
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OrigDyId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrigType", wireType)
			}
			m.OrigType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBili
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OrigType |= DynamicDescType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PreDyId", wireType)
			}
			m.PreDyId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBili
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PreDyId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Comment", wireType)
			}
			m.Comment = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBili
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Comment |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Like", wireType)
			}
			m.Like = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBili
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Like |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field View", wireType)
			}
			m.View = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBili
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.View |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Repost", wireType)
			}
			m.Repost = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBili
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Repost |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timestamp", wireType)
			}
			m.Timestamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBili
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Timestamp |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBili
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= DynamicDescType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bvid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBili
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBili
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBili
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Bvid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DynamicIdStr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBili
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBili
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBili
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DynamicIdStr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uid", wireType)
			}
			m.Uid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBili
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Uid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserProfile", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBili
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBili
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBili
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.UserProfile == nil {
				m.UserProfile = &Card_Desc_UserProfile{}
			}
			if err := m.UserProfile.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBili(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBili
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Card_Desc_UserProfile) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBili
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UserProfile: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UserProfile: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Info", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBili
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBili
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBili
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Info == nil {
				m.Info = &Card_Desc_UserProfile_Info{}
			}
			if err := m.Info.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBili(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBili
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Card_Desc_UserProfile_Info) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBili
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Info: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Info: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uname", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBili
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBili
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBili
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Uname = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBili(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBili
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Card_Extra) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBili
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Extra: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Extra: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsSpaceTop", wireType)
			}
			m.IsSpaceTop = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBili
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IsSpaceTop |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipBili(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBili
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Card_Display) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBili
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Display: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Display: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EmojiInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBili
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBili
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBili
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.EmojiInfo == nil {
				m.EmojiInfo = &Card_Display_EmojiInfo{}
			}
			if err := m.EmojiInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Origin", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBili
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBili
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBili
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Origin == nil {
				m.Origin = &Card_Display_Origin{}
			}
			if err := m.Origin.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBili(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBili
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Card_Display_EmojiInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBili
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EmojiInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EmojiInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EmojiDetails", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBili
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBili
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBili
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EmojiDetails = append(m.EmojiDetails, &Card_Display_EmojiInfo_EmojiDetail{})
			if err := m.EmojiDetails[len(m.EmojiDetails)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBili(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBili
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Card_Display_EmojiInfo_EmojiDetail) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBili
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EmojiDetail: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EmojiDetail: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EmojiName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBili
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBili
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBili
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EmojiName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBili
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PackageId", wireType)
			}
			m.PackageId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBili
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PackageId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			m.State = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBili
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.State |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBili
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Text", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBili
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBili
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBili
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Text = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Url", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBili
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBili
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBili
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Url = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBili(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBili
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Card_Display_Origin) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBili
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Origin: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Origin: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EmojiInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBili
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBili
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBili
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.EmojiInfo == nil {
				m.EmojiInfo = &Card_Display_EmojiInfo{}
			}
			if err := m.EmojiInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBili(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBili
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DynamicSvrSpaceHistoryResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBili
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DynamicSvrSpaceHistoryResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DynamicSvrSpaceHistoryResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBili
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBili
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBili
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBili
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBili
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBili
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBili
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Data == nil {
				m.Data = &DynamicSvrSpaceHistoryResponse_Data{}
			}
			if err := m.Data.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBili(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBili
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DynamicSvrSpaceHistoryResponse_Data) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBili
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Data: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Data: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cards", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBili
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBili
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBili
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Cards = append(m.Cards, &Card{})
			if err := m.Cards[len(m.Cards)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HasMore", wireType)
			}
			m.HasMore = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBili
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HasMore |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NextOffset", wireType)
			}
			m.NextOffset = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBili
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NextOffset |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipBili(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBili
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DynamicSvrDynamicNewResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBili
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DynamicSvrDynamicNewResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DynamicSvrDynamicNewResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBili
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBili
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBili
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBili
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBili
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBili
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBili
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Data == nil {
				m.Data = &DynamicSvrDynamicNewResponse_Data{}
			}
			if err := m.Data.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBili(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBili
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DynamicSvrDynamicNewResponse_Data) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBili
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Data: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Data: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewNum", wireType)
			}
			m.NewNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBili
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NewNum |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExistGap", wireType)
			}
			m.ExistGap = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBili
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ExistGap |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateNum", wireType)
			}
			m.UpdateNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBili
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UpdateNum |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OpenRcmd", wireType)
			}
			m.OpenRcmd = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBili
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OpenRcmd |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cards", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBili
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBili
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBili
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Cards = append(m.Cards, &Card{})
			if err := m.Cards[len(m.Cards)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxDynamicId", wireType)
			}
			m.MaxDynamicId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBili
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxDynamicId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HistoryOffset", wireType)
			}
			m.HistoryOffset = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBili
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HistoryOffset |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipBili(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBili
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RelationModifyResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBili
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RelationModifyResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RelationModifyResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBili
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBili
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBili
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBili
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ttl", wireType)
			}
			m.Ttl = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBili
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Ttl |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipBili(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBili
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetAttentionListResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBili
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetAttentionListResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetAttentionListResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBili
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBili
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBili
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBili
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBili
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBili
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBili
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Data == nil {
				m.Data = &GetAttentionListResponse_Data{}
			}
			if err := m.Data.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBili(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBili
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetAttentionListResponse_Data) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBili
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Data: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Data: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowBili
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.List = append(m.List, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowBili
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthBili
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthBili
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.List) == 0 {
					m.List = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowBili
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.List = append(m.List, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field List", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipBili(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBili
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CardWithImage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBili
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CardWithImage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CardWithImage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Item", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBili
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBili
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBili
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Item == nil {
				m.Item = &CardWithImage_Item{}
			}
			if err := m.Item.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBili(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBili
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CardWithImage_Item) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBili
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Item: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Item: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBili
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBili
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBili
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBili
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBili
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBili
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBili
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Category", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBili
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBili
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBili
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Category = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pictures", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBili
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBili
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBili
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Pictures = append(m.Pictures, &CardWithImage_Item_Picture{})
			if err := m.Pictures[len(m.Pictures)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PicturesCount", wireType)
			}
			m.PicturesCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBili
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PicturesCount |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UploadTime", wireType)
			}
			m.UploadTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBili
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UploadTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipBili(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBili
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CardWithImage_Item_Picture) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBili
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Picture: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Picture: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ImgSrc", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBili
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBili
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBili
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ImgSrc = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ImgWidth", wireType)
			}
			m.ImgWidth = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBili
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ImgWidth |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ImgHeight", wireType)
			}
			m.ImgHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBili
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ImgHeight |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field ImgSize", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.ImgSize = float32(math.Float32frombits(v))
		default:
			iNdEx = preIndex
			skippy, err := skipBili(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBili
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CardWithOrig) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBili
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CardWithOrig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CardWithOrig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Item", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBili
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBili
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBili
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Item == nil {
				m.Item = &CardWithOrig_Item{}
			}
			if err := m.Item.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Origin", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBili
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBili
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBili
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Origin = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OriginUser", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBili
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBili
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBili
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.OriginUser == nil {
				m.OriginUser = &CardWithOrig_OriginUser{}
			}
			if err := m.OriginUser.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBili(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBili
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CardWithOrig_Item) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBili
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Item: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Item: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Content", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBili
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBili
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBili
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Content = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timestamp", wireType)
			}
			m.Timestamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBili
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Timestamp |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrigType", wireType)
			}
			m.OrigType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBili
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OrigType |= DynamicDescType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reply", wireType)
			}
			m.Reply = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBili
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Reply |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Miss", wireType)
			}
			m.Miss = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBili
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Miss |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tips", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBili
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBili
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBili
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tips = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBili(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBili
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CardWithOrig_OriginUser) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBili
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OriginUser: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OriginUser: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Info", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBili
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBili
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBili
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Info == nil {
				m.Info = &CardWithOrig_OriginUser_Info{}
			}
			if err := m.Info.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBili(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBili
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CardWithOrig_OriginUser_Info) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBili
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Info: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Info: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uid", wireType)
			}
			m.Uid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBili
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Uid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uname", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBili
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBili
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBili
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Uname = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBili(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBili
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CardWithVideo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBili
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CardWithVideo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CardWithVideo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Desc", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBili
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBili
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBili
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Desc = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Duration", wireType)
			}
			m.Duration = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBili
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Duration |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dynamic", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBili
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBili
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBili
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Dynamic = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pubdate", wireType)
			}
			m.Pubdate = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBili
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Pubdate |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBili
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBili
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBili
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tname", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBili
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBili
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBili
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tname = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Videos", wireType)
			}
			m.Videos = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBili
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Videos |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pic", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBili
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBili
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBili
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Pic = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBili(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBili
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CardTextOnly) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBili
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CardTextOnly: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CardTextOnly: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Item", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBili
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBili
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBili
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Item == nil {
				m.Item = &CardTextOnly_Item{}
			}
			if err := m.Item.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBili(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBili
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CardTextOnly_Item) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBili
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Item: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Item: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RpId", wireType)
			}
			m.RpId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBili
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RpId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uid", wireType)
			}
			m.Uid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBili
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Uid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Content", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBili
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBili
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBili
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Content = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ctrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBili
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBili
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBili
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Ctrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timestamp", wireType)
			}
			m.Timestamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBili
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Timestamp |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reply", wireType)
			}
			m.Reply = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBili
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Reply |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipBili(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBili
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CardWithPost) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBili
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CardWithPost: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CardWithPost: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBili
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBili
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBili
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Summary", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBili
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBili
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBili
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Summary = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ImageUrls", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBili
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBili
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBili
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ImageUrls = append(m.ImageUrls, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BannerUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBili
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBili
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBili
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BannerUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PublishTime", wireType)
			}
			m.PublishTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBili
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PublishTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipBili(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBili
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CardWithMusic) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBili
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CardWithMusic: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CardWithMusic: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipBili(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBili
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CardWithAnime) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBili
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CardWithAnime: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CardWithAnime: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiSeasonInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBili
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBili
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBili
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ApiSeasonInfo == nil {
				m.ApiSeasonInfo = &CardWithAnime_ApiSeasonInfo{}
			}
			if err := m.ApiSeasonInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BulletCount", wireType)
			}
			m.BulletCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBili
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BulletCount |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cover", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBili
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBili
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBili
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Cover = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EpisodeId", wireType)
			}
			m.EpisodeId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBili
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EpisodeId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBili
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBili
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBili
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Index = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IndexTitle", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBili
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBili
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBili
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IndexTitle = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewDesc", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBili
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBili
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBili
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NewDesc = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayCount", wireType)
			}
			m.PlayCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBili
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PlayCount |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReplyCount", wireType)
			}
			m.ReplyCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBili
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ReplyCount |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Url", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBili
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBili
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBili
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Url = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBili(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBili
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CardWithAnime_ApiSeasonInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBili
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ApiSeasonInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ApiSeasonInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BgmType", wireType)
			}
			m.BgmType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBili
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BgmType |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cover", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBili
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBili
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBili
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Cover = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsFinish", wireType)
			}
			m.IsFinish = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBili
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IsFinish |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SeasonId", wireType)
			}
			m.SeasonId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBili
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SeasonId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBili
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBili
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBili
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalCount", wireType)
			}
			m.TotalCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBili
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalCount |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ts", wireType)
			}
			m.Ts = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBili
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Ts |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TypeName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBili
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBili
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBili
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TypeName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBili(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBili
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CardWithSketch) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBili
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CardWithSketch: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CardWithSketch: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Vest", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBili
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBili
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBili
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Vest == nil {
				m.Vest = &CardWithSketch_Vest{}
			}
			if err := m.Vest.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sketch", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBili
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBili
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBili
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Sketch == nil {
				m.Sketch = &CardWithSketch_Sketch{}
			}
			if err := m.Sketch.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBili(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBili
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CardWithSketch_Vest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBili
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Vest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Vest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uid", wireType)
			}
			m.Uid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBili
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Uid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Content", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBili
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBili
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBili
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Content = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBili(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBili
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CardWithSketch_Sketch) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBili
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Sketch: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Sketch: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBili
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBili
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBili
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DescText", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBili
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBili
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBili
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DescText = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBili(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBili
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CardWithLive) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBili
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CardWithLive: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CardWithLive: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Roomid", wireType)
			}
			m.Roomid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBili
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Roomid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uid", wireType)
			}
			m.Uid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBili
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Uid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uname", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBili
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBili
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBili
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Uname = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cover", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBili
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBili
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBili
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Cover = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBili
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBili
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBili
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AreaV2Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBili
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBili
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBili
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AreaV2Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LiveStatus", wireType)
			}
			m.LiveStatus = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBili
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LiveStatus |= LiveStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoundStatus", wireType)
			}
			m.RoundStatus = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBili
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RoundStatus |= RoomStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipBili(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBili
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CardWithLiveV2) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBili
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CardWithLiveV2: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CardWithLiveV2: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LivePlayInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBili
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBili
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBili
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.LivePlayInfo == nil {
				m.LivePlayInfo = &CardWithLiveV2_LivePlayInfo{}
			}
			if err := m.LivePlayInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Style", wireType)
			}
			m.Style = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBili
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Style |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBili
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipBili(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBili
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CardWithLiveV2_LivePlayInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBili
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LivePlayInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LivePlayInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cover", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBili
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBili
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBili
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Cover = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBili
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBili
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBili
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoomId", wireType)
			}
			m.RoomId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBili
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RoomId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LiveStatus", wireType)
			}
			m.LiveStatus = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBili
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LiveStatus |= LiveStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Link", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBili
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBili
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBili
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Link = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uid", wireType)
			}
			m.Uid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBili
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Uid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LiveId", wireType)
			}
			m.LiveId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBili
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LiveId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AreaId", wireType)
			}
			m.AreaId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBili
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AreaId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AreaName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBili
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBili
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBili
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AreaName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ParentAreaId", wireType)
			}
			m.ParentAreaId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBili
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ParentAreaId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ParentAreaName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBili
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBili
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBili
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ParentAreaName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoomType", wireType)
			}
			m.RoomType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBili
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RoomType |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipBili(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBili
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipBili(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowBili
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowBili
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowBili
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthBili
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupBili
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthBili
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthBili        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowBili          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupBili = fmt.Errorf("proto: unexpected end of group")
)
